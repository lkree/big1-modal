{"version":3,"sources":["Utils.js","Contexts/AppContext.js","Actions.js","Components/Counter.js","Components/OldCounters.js","Components/CreateCounter.js","Reducers/RootReducer.js","Components/Modes.js","Components/App.js","Hooks/useLocalStorage.js","index.js"],"names":["counterStates","counterInitialValue","name","state","value","seconds","minutes","hours","intervalId","modes","getNewTime","newSeconds","newMinutes","newHours","AppContext","createContext","STOP","PLAY","PAUSE","UPDATE_TIME","CREATE_COUNTER","SET_INTERVAL_ID","DELETE_AND_MOVE_TO_TABLE","CHANGE_NAME","DELETE_FROM_TABLE","CHANGE_MODE","Counter","id","useContext","dispatch","isPlaying","counters","data","style","border","className","top","right","fontSize","cursor","onClick","type","maxWidth","title","onChange","target","payload","Button","color","setInterval","OldCounters","oldCounters","ids","length","Row","md","Col","Table","dark","map","Date","toDateString","onDeleteClick","CreateCounter","rootReducer","action","newState","actions","clearInterval","mode","countersData","forEach","setStorageState","newId","getTime","push","filter","oldCounter","counterData","counter","rest","newIds","Modes","useState","isOpen","setIsOpen","position","Dropdown","toggle","DropdownToggle","caret","DropdownMenu","container","DropdownItem","initialState","App","keys","commonState","initialKeys","Object","k","localStorage","setItem","record","JSON","parse","getItem","undefined","setState","resultState","stringify","useLocalStorage","storageState","useReducer","Provider","Container","fluid","height","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.cf14bb43.chunk.js","sourcesContent":["export const counterStates = { playing: 1, pause: 2 };\r\nexport const counterInitialValue = {\r\n   name: 'без имени',\r\n   state: counterStates.pause,\r\n   value: {\r\n      seconds: 0,\r\n      minutes: 0,\r\n      hours: 0\r\n   },\r\n   intervalId: null\r\n};\r\nexport const modes = { single: 'single', multi: 'multi' };\r\n\r\nexport const getNewTime = (state) => {\r\n   const { seconds, minutes, hours } = state;\r\n\r\n   let newSeconds = seconds + 1;\r\n   let newMinutes = minutes;\r\n   let newHours = hours;\r\n\r\n   if (newSeconds === 60) {\r\n      newSeconds = 0;\r\n      newMinutes += 1;\r\n   }\r\n   if (newMinutes === 60) {\r\n      newMinutes = 0;\r\n      newHours += 1;\r\n   }\r\n\r\n   return {\r\n      seconds: newSeconds,\r\n      minutes: newMinutes,\r\n      hours: newHours\r\n   }\r\n}\r\n","import { createContext } from 'react';\r\n\r\nexport const AppContext = createContext(null);\r\n","export const STOP = 'stop';\r\nexport const PLAY = 'play';\r\nexport const PAUSE = 'pause';\r\nexport const UPDATE_TIME = 'updateTime';\r\nexport const CREATE_COUNTER = 'createCounter';\r\nexport const SET_INTERVAL_ID = 'setIntervalId';\r\nexport const DELETE_AND_MOVE_TO_TABLE = 'deleteAndMoveToTable';\r\nexport const CHANGE_NAME = 'changeName';\r\nexport const DELETE_FROM_TABLE = 'deleteFromTable';\r\nexport const CHANGE_MODE = 'changeMode';\r\n","import { useContext } from 'react';\r\nimport { counterStates } from \"../Utils\";\r\nimport { Button } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { PAUSE, PLAY, STOP, UPDATE_TIME, DELETE_AND_MOVE_TO_TABLE, CHANGE_NAME, SET_INTERVAL_ID } from \"../Actions\";\r\n\r\nconst Counter = ({ id }) => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const isPlaying = () => state.counters.data[id].state === counterStates.playing;\r\n   const onPausePlayClick = () => {\r\n      if (isPlaying()) {\r\n         dispatch({ type: PAUSE, id });\r\n      } else {\r\n         dispatch({ type: PLAY, id });\r\n         const intervalId = setInterval(() => dispatch({ type: UPDATE_TIME, id }), 1000);\r\n         dispatch({ type: SET_INTERVAL_ID, intervalId, id });\r\n      }\r\n   };\r\n   const onStopClick = () => dispatch({ type: STOP, id });\r\n   const onDeleteClick = () => dispatch({ type: DELETE_AND_MOVE_TO_TABLE, id });\r\n   const onNameChange = ({ target: { value } }) => dispatch({ type: CHANGE_NAME, payload: value, id });\r\n\r\n   const { value: { hours, minutes, seconds }, name } = state.counters.data[id];\r\n\r\n   return (\r\n      <div style={{ border: '1px solid' }} className='d-flex flex-column position-relative pt-4 pb-4 bg-dark'>\r\n         <div className='position-absolute text-danger'\r\n              style={{ top: '-5px', right: '5px', fontSize: '20px', cursor: 'pointer' }}\r\n              onClick={ onDeleteClick }>\r\n            &times;\r\n         </div>\r\n         <input className='mb-3 mt-3 align-self-center text-white bg-dark'\r\n                style={{ maxWidth: '60%' }}\r\n                value={ name }\r\n                title={ name }\r\n                onChange={ onNameChange } />\r\n         <div className='mb-5 justify-content-around d-flex'>\r\n            <div className='text-white' key='hours'>\r\n               { hours } :\r\n            </div>\r\n            <div className='text-white' key='minutes'>\r\n               { minutes } :\r\n            </div>\r\n            <div className='text-white' key='seconds'>\r\n               { seconds }\r\n            </div>\r\n         </div>\r\n         <div className='justify-content-around d-flex'>\r\n            <div>\r\n               <Button color='success' onClick={onPausePlayClick}>\r\n                  { isPlaying() ? 'Пауза' : seconds === 0 ? 'Старт' : 'Продолжить' }\r\n               </Button>\r\n            </div>\r\n            <div>\r\n               <Button color='success' onClick={onStopClick}>Стоп</Button>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n};\r\n\r\nexport default Counter;\r\n","import { useContext } from 'react';\r\nimport { Col, Row, Table } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { DELETE_FROM_TABLE } from \"../Actions\";\r\n\r\nconst OldCounters = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const onDeleteClick = (id) => dispatch({ type: DELETE_FROM_TABLE, id });\r\n\r\n   if (!state.oldCounters.ids.length) {\r\n      return <></>\r\n   }\r\n\r\n   return (\r\n      <Row md='2'>\r\n         <Col className='mb-5'>\r\n            <Table dark>\r\n         <thead>\r\n            <tr>\r\n               <td>Дата</td>\r\n               <td>Имя</td>\r\n               <td>Время</td>\r\n               <td></td>\r\n            </tr>\r\n         </thead>\r\n         <tbody>\r\n            { state.oldCounters.ids.map(id => {\r\n               const { name, value: { seconds, minutes, hours } } = state.oldCounters.data[id];\r\n\r\n               return (\r\n                     <tr key={id}>\r\n                        <td>{ new Date(id).toDateString() }</td>\r\n                        <td>{ name }</td>\r\n                        <td>{ hours } : { minutes } : { seconds }</td>\r\n                        <td onClick={() => onDeleteClick(id)}>&times;</td>\r\n                     </tr>\r\n                  )\r\n            }) }\r\n         </tbody>\r\n      </Table>\r\n         </Col>\r\n      </Row>\r\n   )\r\n};\r\n\r\nexport default OldCounters;\r\n","import { useContext } from 'react';\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Button, Row } from \"reactstrap\";\r\nimport { CREATE_COUNTER } from \"../Actions\";\r\n\r\nexport const CreateCounter = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const createCounter = () => dispatch({ type: CREATE_COUNTER });\r\n\r\n   return (\r\n      <Row>\r\n         <Button onClick={ createCounter }>{ state.counters.ids.length ? 'Ещё счётчик' : 'Создать счётчик' }</Button>\r\n      </Row>\r\n   )\r\n}\r\n","import * as actions from './../Actions';\r\nimport {getNewTime, counterInitialValue, counterStates, modes} from \"../Utils\";\r\n\r\nexport const rootReducer = (state, action) => {\r\n   let newState;\r\n\r\n   switch (action.type) {\r\n      case actions.STOP:\r\n         if (state.counters.data[action.id].state === counterStates.playing) {\r\n            clearInterval(state.counters.data[action.id].intervalId);\r\n         }\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: counterStates.pause,\r\n                     value: counterInitialValue.value\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case actions.PLAY:\r\n         if (state.mode === modes.single) {\r\n            const countersData = {};\r\n\r\n            state.counters.ids.forEach(id => {\r\n               countersData[id] = {\r\n                  ...state.counters.data[id],\r\n                  state: counterStates.pause\r\n               }\r\n\r\n               if (countersData[id].intervalId !== null) {\r\n                  clearInterval(countersData[id].intervalId);\r\n                  countersData[id].intervalId = null;\r\n               }\r\n            });\r\n\r\n\r\n            return {\r\n               ...state,\r\n               counters: {\r\n                  ...state.counters,\r\n                  data: {\r\n                     ...countersData,\r\n                     [action.id]: {\r\n                        ...state.counters.data[action.id],\r\n                        state: counterStates.playing,\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         } else {\r\n            return {\r\n               ...state,\r\n               counters: {\r\n                  ...state.counters,\r\n                  data: {\r\n                     ...state.counters.data,\r\n                     [action.id]: {\r\n                        ...state.counters.data[action.id],\r\n                        state: counterStates.playing,\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case actions.PAUSE:\r\n         clearInterval(state.counters.data[action.id].intervalId);\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: counterStates.pause\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case actions.UPDATE_TIME:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     value: getNewTime(state.counters.data[action.id].value)\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState({\r\n            ...newState,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: counterStates.pause\r\n                  }\r\n               }\r\n            }\r\n         });\r\n\r\n         return newState;\r\n      case actions.SET_INTERVAL_ID:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     intervalId: action.intervalId\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.CREATE_COUNTER:\r\n         const newId = new Date().getTime();\r\n         state.counters.ids.push(newId);\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [newId]: { ...counterInitialValue }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.DELETE_AND_MOVE_TO_TABLE:\r\n         const ids = state.counters.ids.filter(id => id !== action.id);\r\n         let oldCounter = {};\r\n         const counterData = (({ [action.id]: counter, ...rest }) => {\r\n            const { seconds = 0, minutes = 0, hours = 0 } = counter?.value;\r\n\r\n            if (seconds !== 0 || minutes !== 0 || hours !== 0) {\r\n               oldCounter = { ...counter };\r\n               state.oldCounters.ids.push(action.id);\r\n            }\r\n\r\n            return rest;\r\n         })(state.counters.data);\r\n\r\n         if (state.counters.data[action.id].intervalId) {\r\n            clearInterval(state.counters.data[action.id].intervalId);\r\n         }\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: {\r\n               ...state.oldCounters,\r\n               data: {\r\n                  ...state.oldCounters.data,\r\n                  [action.id]: oldCounter\r\n               }\r\n            },\r\n            counters: { ids, data: counterData }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.CHANGE_NAME:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     name: action.payload\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.DELETE_FROM_TABLE:\r\n         const data = (({ [action.id]:_, ...rest }) => rest)(state.oldCounters.data);\r\n         const newIds = state.oldCounters.ids.filter(id => action.id !== id);\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: { ids: newIds, data }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.CHANGE_MODE:\r\n         if (action.mode !== state.mode) {\r\n            newState = {\r\n               ...state,\r\n               mode: action.mode\r\n            }\r\n\r\n            action.setStorageState(newState);\r\n\r\n            return newState;\r\n         }\r\n\r\n         return { ...state };\r\n      default:\r\n         return { ...state };\r\n   }\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownMenu } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { modes } from \"../Utils\";\r\nimport { CHANGE_MODE } from './../Actions';\r\n\r\nexport const Modes = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const [isOpen, setIsOpen] = useState(false);\r\n\r\n   return (\r\n      <div className='' style={{ position: 'fixed', top: '10px', right: '15px' }}>\r\n         <Dropdown isOpen={ isOpen } toggle={ () => setIsOpen(value => !value) }>\r\n            <DropdownToggle caret>{ state.mode }</DropdownToggle>\r\n            <DropdownMenu container=\"body\">\r\n               <DropdownItem onClick={() => dispatch({ type: CHANGE_MODE, mode: modes.single })}>{ modes.single }</DropdownItem>\r\n               <DropdownItem onClick={() => dispatch({ type: CHANGE_MODE, mode: modes.multi })}>{ modes.multi }</DropdownItem>\r\n            </DropdownMenu>\r\n         </Dropdown>\r\n      </div>\r\n   )\r\n}\r\n","import { useReducer } from 'react';\r\nimport Counter from \"./Counter\";\r\nimport OldCounters from \"./OldCounters\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { CreateCounter } from './CreateCounter';\r\nimport { rootReducer } from '../Reducers/RootReducer';\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { useLocalStorage } from \"../Hooks/useLocalStorage\";\r\nimport { modes } from \"../Utils\";\r\nimport { Modes } from './Modes';\r\n\r\nconst initialState = {\r\n   counters: {\r\n      ids: [],\r\n      data: {}\r\n   },\r\n   oldCounters: {\r\n      ids: [],\r\n      data: []\r\n   },\r\n   mode: modes.multi\r\n};\r\n\r\nconst App = () => {\r\n   const [storageState, setStorageState] = useLocalStorage({ keys: ['counters', 'oldCounters', 'mode'] });\r\n   const [state, dispatch] = useReducer(rootReducer, { ...initialState, ...storageState }, (state) => state);\r\n   const customDispatch = (data) => dispatch({ ...data, setStorageState });\r\n\r\n   return (\r\n      <AppContext.Provider value={[state, customDispatch]}>\r\n         <Container fluid className='bg-primary p-5' style={{ height: '100vh' }}>\r\n            <Modes />\r\n            <OldCounters key='oldCounters' />\r\n            <Row key='counters' className='mb-4'>\r\n               { state.counters.ids.map((id) => (\r\n                  <Col md={3} key={id} className='mb-4'>\r\n                     <Counter id={id} />\r\n                  </Col>\r\n               )) }\r\n            </Row>\r\n            <CreateCounter key='createCounter'/>\r\n         </Container>\r\n      </AppContext.Provider>\r\n   )\r\n};\r\n\r\nexport default App;\r\n","import { useState } from 'react';\r\n\r\nexport const useLocalStorage = ({ keys, initialState = {} }) => {\r\n   const commonState = {};\r\n   const initialKeys = Object.keys(initialState);\r\n\r\n   initialKeys.forEach(k => {\r\n      localStorage.setItem(k, initialKeys[k]);\r\n   });\r\n   keys.forEach(k => {\r\n      const record = JSON.parse(localStorage.getItem(k));\r\n\r\n      if (record !== null && record !== undefined) {\r\n         commonState[k] = record;\r\n      }\r\n   });\r\n\r\n   const [state, setState] = useState(commonState);\r\n\r\n   const storageSetState = (newState) => {\r\n      let resultState;\r\n\r\n      if (typeof newState === 'function') {\r\n         resultState = { ...state, ...newState(state) };\r\n      } else if (typeof newState === 'object') {\r\n         resultState = { ...state, ...newState };\r\n      } else {\r\n         resultState = { [keys[0]]: newState };\r\n      }\r\n\r\n      keys.forEach(k => localStorage.setItem(k, JSON.stringify(resultState[k])));\r\n      setState(resultState);\r\n   };\r\n\r\n   return [state, storageSetState];\r\n}\r\n","import * as React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./Components/App\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}