{"version":3,"sources":["Utils.ts","Actions.ts","Contexts/AppContext.ts","Components/OldCounterItem.tsx","Components/OldCounterFolder.tsx","Components/OldCounters.tsx","Components/CreateCounter.tsx","Reducers/RootReducer.ts","Components/Modes.tsx","Components/inputHelper.tsx","Components/Counter.tsx","Components/Counters.tsx","Components/App.tsx","Hooks/useLocalStorage.ts","index.tsx"],"names":["CounterStates","Modes","counterInitialValue","name","state","Pause","value","seconds","minutes","hours","intervalId","Actions","initialState","counters","ids","data","oldCounters","mode","Multi","usedNames","getNewTime","newSeconds","newMinutes","newHours","AppContext","createContext","OldCounterItem","useContext","dispatch","id","className","type","title","style","background","border","textOverflow","onBlur","target","ADD_TO_USED_NAMES","payload","onChange","evt","CHANGE_NAME_FROM_DELETED","onChangeName","onClick","RESTORE_FROM_TABLE","onRestoreClick","DELETE_FROM_TABLE","onDeleteClick","OldCounterFolder","useState","isOpen","setIsOpen","stopPropagation","Collapse","Object","keys","map","k","isNode","OldCounters","result","forEach","date","Date","month","String","toLocaleString","dateCreated","getDate","length","Row","Col","CreateCounter","Button","CREATE_COUNTER","rootReducer","action","newState","STOP","Playing","clearInterval","PLAY","Single","countersData","PAUSE","UPDATE_TIME","setStorageState","SET_INTERVAL_ID","newId","getTime","push","DELETE_AND_MOVE_TO_TABLE","filter","oldCounter","counterData","counter","rest","CHANGE_NAME_FROM_EXIST","newIds","CHANGE_MODE","oldIds","newCounter","oldCountersData","trim","toLowerCase","every","w","indexOf","includes","DELETE_FROM_USED_NAMES","n","CHANGE_TIME","timeType","position","top","right","Dropdown","toggle","DropdownToggle","caret","DropdownMenu","container","DropdownItem","ModeTypes","InputHelper","currentInput","onDelete","zIndex","Counter","inputRef","useRef","helperValue","setHelperValue","isHelperVisible","setIsHelperVisible","isEdit","setIsEdit","isPlaying","Boolean","onTimeChange","fontSize","cursor","maxWidth","readOnly","ref","setTimeout","onFocus","currentName","current","focus","color","setInterval","flexBasis","Counters","md","App","commonState","localStorage","setItem","JSON","stringify","record","parse","getItem","undefined","setState","resultState","useLocalStorage","storageState","useReducer","Provider","Container","fluid","minHeight","padding","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.bd8d79d3.chunk.js","sourcesContent":["import { Actions } from './Actions';\r\n\r\nexport enum CounterStates { Playing, Pause }\r\n\r\nexport const counterInitialValue: ICounterItem = {\r\n   name: 'без имени',\r\n   state: CounterStates.Pause,\r\n   value: {\r\n      seconds: 0,\r\n      minutes: 0,\r\n      hours: 0\r\n   },\r\n   intervalId: null\r\n};\r\n\r\nexport enum Modes { Single = 'single', Multi = 'multi' }\r\n\r\nexport const initialState: IState = {\r\n   counters: {\r\n      ids: [],\r\n      data: {}\r\n   },\r\n   oldCounters: {\r\n      ids: [],\r\n      data: {}\r\n   },\r\n   mode: Modes.Multi,\r\n   usedNames: []\r\n\r\n};\r\n\r\nexport const getNewTime = (state: ICounterValue) => {\r\n   const { seconds, minutes, hours } = state;\r\n\r\n   let newSeconds = seconds + 1;\r\n   let newMinutes = minutes;\r\n   let newHours = hours;\r\n\r\n   if (newSeconds >= 60) {\r\n      newSeconds = 0;\r\n      newMinutes += 1;\r\n   }\r\n   if (newMinutes >= 60) {\r\n      newMinutes = 0;\r\n      newHours += 1;\r\n   }\r\n\r\n   return {\r\n      seconds: newSeconds,\r\n      minutes: newMinutes,\r\n      hours: newHours\r\n   }\r\n}\r\n\r\nexport type CounterTypes = 'counters' | 'oldCounters';\r\n\r\nexport interface ICounterValue {\r\n   hours: number,\r\n   minutes: number,\r\n   seconds: number\r\n}\r\n\r\nexport interface ICounterItem {\r\n   value: ICounterValue;\r\n   state: CounterStates;\r\n   intervalId: NodeJS.Timeout | null;\r\n   name: string;\r\n}\r\n\r\nexport type IState = {\r\n   [K in CounterTypes]: {\r\n      ids: string[],\r\n      data: {\r\n         [key: string]: ICounterItem\r\n      }\r\n   }\r\n} & { mode: Modes, usedNames: string[] }\r\n\r\nexport interface IAction {\r\n   setStorageState: Function;\r\n   id?: string;\r\n   type?: Actions;\r\n   payload?: string;\r\n   intervalId?: NodeJS.Timeout;\r\n   timeType?: 'hours' | 'minutes' | 'seconds';\r\n   mode?: Modes;\r\n}\r\n\r\nexport type Node = { isNode: boolean; id?: string } & ICounterItem;\r\nexport type NodesRecord = Record<string, Node>;\r\nexport interface IOM { [K: string]: Node | NodesRecord | IOM; }\r\n","export enum Actions {\r\n   STOP = 'stop',\r\n   PLAY = 'play',\r\n   PAUSE = 'pause',\r\n   UPDATE_TIME = 'updateTime',\r\n   CREATE_COUNTER = 'createCounter',\r\n   SET_INTERVAL_ID = 'setIntervalId',\r\n   DELETE_AND_MOVE_TO_TABLE = 'deleteAndMoveToTable',\r\n   CHANGE_NAME_FROM_EXIST = 'changeNameFromExist',\r\n   CHANGE_NAME_FROM_DELETED = 'changeNameFromDeleted',\r\n   DELETE_FROM_TABLE = 'deleteFromTable',\r\n   CHANGE_MODE = 'changeMode',\r\n   RESTORE_FROM_TABLE = 'restoreFromTable',\r\n   ADD_TO_USED_NAMES = 'addToUsedNames',\r\n   DELETE_FROM_USED_NAMES = 'deleteFromUsedNames',\r\n   CHANGE_TIME = 'changeTime'\r\n}\r\n","import { createContext } from 'react';\r\nimport { IAction, initialState } from \"../Utils\";\r\n\r\nexport const AppContext = createContext([initialState, (data: Partial<IAction>) => {}] as const);\r\n","import { AppContext } from \"../Contexts/AppContext\";\r\nimport { Actions } from \"../Actions\";\r\nimport { useContext } from \"react\";\r\nimport { Node } from \"../Utils\";\r\n\r\nimport './_oldCounterItem.css';\r\n\r\ninterface IOptions {\r\n    data: Node;\r\n}\r\n\r\nexport const OldCounterItem = ({ data }: IOptions) => {\r\n    const [, dispatch] = useContext(AppContext);\r\n    const { id, name, value: { hours, minutes, seconds } } = data;\r\n\r\n    const onDeleteClick = (id: string) => dispatch({ type: Actions.DELETE_FROM_TABLE, id });\r\n    const onRestoreClick = (id: string) => dispatch({ type: Actions.RESTORE_FROM_TABLE, id });\r\n    const onChangeName = ({ target: { value } } : { target: HTMLInputElement }, id: string) => (\r\n        dispatch({ type: Actions.CHANGE_NAME_FROM_DELETED, id, payload: value })\r\n    );\r\n    const onBlur = ({ target: { value } }: { target: HTMLInputElement }) => (\r\n        dispatch({ type: Actions.ADD_TO_USED_NAMES, payload: value })\r\n    );\r\n\r\n    return (\r\n        <div className='oldCounterItem d-flex p-3 border-bottom align-items-center'>\r\n            <p className='oldCounterItem__item text-white'>\r\n                <input type='text'\r\n                       className='w-100 text-white'\r\n                       title={ name }\r\n                       value={ name }\r\n                       style={{ background: 'transparent', border: 'none', textOverflow: 'ellipsis' }}\r\n                       onBlur={ onBlur }\r\n                       onChange={(evt) => onChangeName(evt, id)}\r\n                 />\r\n            </p>\r\n            <p className='oldCounterItem__item oldCounterItem__item--time text-white'>{ hours } : { minutes } : { seconds }</p>\r\n            <p className='oldCounterItem__item oldCounterItem__item--action' onClick={() => onRestoreClick(id)}>&#9874;</p>\r\n            <p className='oldCounterItem__item oldCounterItem__item--action text-danger' onClick={() => onDeleteClick(id)}>&times;</p>\r\n        </div>\r\n    );\r\n};\r\n","import { OldCounterItem } from \"./OldCounterItem\";\r\nimport { NodesRecord, Node, IOM } from \"../Utils\";\r\nimport { SyntheticEvent, useState } from 'react';\r\nimport { Collapse } from 'reactstrap';\r\n\r\ninterface IOptions {\r\n    name: keyof IOM;\r\n    data: IOM | NodesRecord;\r\n}\r\n\r\nexport const OldCounterFolder = ({ name, data }: IOptions) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const onClick = (evt: SyntheticEvent) => {\r\n        evt.stopPropagation();\r\n        setIsOpen(value => !value);\r\n    };\r\n\r\n    return (\r\n        <div key={ name } className='bg-dark pt-1 pb-1 pl-3 pr-3'>\r\n            <div className='text-white' onClick={ onClick }>{ name }</div>\r\n\r\n            <Collapse isOpen={ isOpen }>\r\n                { Object.keys(data).map(k => (\r\n                    data[k].isNode\r\n                        ? <OldCounterItem data={ data[k] as Node } key={ k } />\r\n                        : <OldCounterFolder data={ data[k] as IOM } name={ k } key={ k } />\r\n                )) }\r\n            </Collapse>\r\n        </div>\r\n    );\r\n}\r\n","import { AppContext } from \"../Contexts/AppContext\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { useContext } from 'react';\r\nimport { IOM, NodesRecord } from \"../Utils\";\r\nimport { OldCounterFolder } from \"./OldCounterFolder\";\r\n\r\nexport const OldCounters = () => {\r\n   const [state] = useContext(AppContext);\r\n   const result = {} as IOM;\r\n\r\n   const createStructure = () => {\r\n      state.oldCounters.ids.forEach(id => {\r\n         const date = new Date(+id);\r\n         const month = String(date.toLocaleString('default', { month: 'long' }));\r\n         const dateCreated = String(date.getDate());\r\n\r\n         if (!result[month]) {\r\n            result[month] = {};\r\n         }\r\n\r\n         if (!(result[month] as IOM)[dateCreated]) {\r\n            (result[month] as IOM)[dateCreated] = {};\r\n         }\r\n\r\n         ((result[month] as IOM)[dateCreated] as NodesRecord)[id] = {\r\n            ...state.oldCounters.data[id], id: id, isNode: true\r\n         };\r\n      });\r\n   }\r\n\r\n   createStructure();\r\n\r\n   if (!state.oldCounters.ids.length) {\r\n      return <></>\r\n   }\r\n\r\n   return (\r\n      <Row className='overflow-auto'>\r\n         <Col className='mb-5'>\r\n            { Object.keys(result).map(k => (\r\n               <OldCounterFolder data={ result[k] as IOM } name={ k } key={ k } />\r\n            )) }\r\n         </Col>\r\n      </Row>\r\n   )\r\n};\r\n","import { useContext } from 'react';\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Button, Row, Col } from \"reactstrap\";\r\nimport { Actions } from \"../Actions\";\r\n\r\nexport const CreateCounter = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const createCounter = () => dispatch({ type: Actions.CREATE_COUNTER });\r\n\r\n   return (\r\n      <Row>\r\n         <Col>\r\n            <Button onClick={ createCounter }>{ state.counters.ids.length ? 'Ещё счётчик' : 'Создать счётчик' }</Button>\r\n         </Col>\r\n      </Row>\r\n   )\r\n}\r\n","import {\r\n   getNewTime,\r\n   counterInitialValue,\r\n   CounterStates,\r\n   Modes,\r\n   IState,\r\n   IAction,\r\n   CounterTypes,\r\n   ICounterItem\r\n} from '../Utils';\r\nimport { Actions } from '../Actions';\r\n\r\nexport const rootReducer = (state: IState, action: IAction): IState => {\r\n   let newState: IState;\r\n\r\n   switch (action.type) {\r\n      case Actions.STOP:\r\n         if (state.counters.data[action.id].state === CounterStates.Playing) {\r\n            clearInterval(state.counters.data[action.id].intervalId);\r\n         }\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: CounterStates.Pause,\r\n                     value: counterInitialValue.value\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case Actions.PLAY:\r\n         if (state.mode === Modes.Single) {\r\n            const countersData = {} as IState[CounterTypes]['data'];\r\n\r\n            state.counters.ids.forEach(id => {\r\n               countersData[id] = {\r\n                  ...state.counters.data[id],\r\n                  state: CounterStates.Pause\r\n               }\r\n\r\n               if (countersData[id].intervalId !== null) {\r\n                  clearInterval(countersData[id].intervalId);\r\n                  countersData[id].intervalId = null;\r\n               }\r\n            });\r\n\r\n\r\n            return {\r\n               ...state,\r\n               counters: {\r\n                  ...state.counters,\r\n                  data: {\r\n                     ...countersData,\r\n                     [action.id]: {\r\n                        ...state.counters.data[action.id],\r\n                        state: CounterStates.Playing,\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         } else {\r\n            return {\r\n               ...state,\r\n               counters: {\r\n                  ...state.counters,\r\n                  data: {\r\n                     ...state.counters.data,\r\n                     [action.id]: {\r\n                        ...state.counters.data[action.id],\r\n                        state: CounterStates.Playing,\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case Actions.PAUSE:\r\n         clearInterval(state.counters.data[action.id].intervalId);\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: CounterStates.Pause\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case Actions.UPDATE_TIME:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     value: getNewTime(state.counters.data[action.id].value)\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState({\r\n            ...newState,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: CounterStates.Pause\r\n                  }\r\n               }\r\n            }\r\n         });\r\n\r\n         return newState;\r\n      case Actions.SET_INTERVAL_ID:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     intervalId: action.intervalId\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CREATE_COUNTER:\r\n         const newId = String(new Date().getTime());\r\n         state.counters.ids.push(newId);\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [newId]: { ...counterInitialValue }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.DELETE_AND_MOVE_TO_TABLE:\r\n         const ids = state.counters.ids.filter(id => id !== action.id);\r\n         let oldCounter = {} as ICounterItem;\r\n         const counterData = (({ [action.id]: counter, ...rest }) => {\r\n            const { seconds = 0, minutes = 0, hours = 0 } = counter?.value;\r\n\r\n            if (seconds !== 0 || minutes !== 0 || hours !== 0) {\r\n               oldCounter = { ...counter };\r\n               state.oldCounters.ids.push(action.id);\r\n            }\r\n\r\n            return rest;\r\n         })(state.counters.data);\r\n\r\n         if (state.counters.data[action.id].intervalId) {\r\n            clearInterval(state.counters.data[action.id].intervalId);\r\n         }\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: {\r\n               ...state.oldCounters,\r\n               data: {\r\n                  ...state.oldCounters.data,\r\n                  [action.id]: oldCounter\r\n               }\r\n            },\r\n            counters: { ids, data: counterData }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CHANGE_NAME_FROM_EXIST:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     name: action.payload\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CHANGE_NAME_FROM_DELETED:\r\n         newState = {\r\n            ...state,\r\n            oldCounters: {\r\n               ...state.oldCounters,\r\n               data: {\r\n                  ...state.oldCounters.data,\r\n                  [action.id]: {\r\n                     ...state.oldCounters.data[action.id],\r\n                     name: action.payload\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.DELETE_FROM_TABLE:\r\n         const data = (({ [action.id]:_, ...rest }) => rest)(state.oldCounters.data);\r\n         const newIds = state.oldCounters.ids.filter(id => action.id !== id);\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: { ids: newIds, data }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CHANGE_MODE:\r\n         if (action.mode !== state.mode) {\r\n            newState = {\r\n               ...state,\r\n               mode: action.mode\r\n            }\r\n\r\n            action.setStorageState(newState);\r\n\r\n            return newState;\r\n         }\r\n\r\n         return { ...state };\r\n      case Actions.RESTORE_FROM_TABLE:\r\n         const oldIds = state.oldCounters.ids.filter(id => id !== action.id);\r\n         let newCounter = {} as ICounterItem;\r\n\r\n         const oldCountersData = (({ [action.id]: counter, ...rest }) => {\r\n            newCounter = { ...counter };\r\n            state.counters.ids.push(action.id);\r\n\r\n            return rest;\r\n         })(state.oldCounters.data);\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: { ids: oldIds, data: { ...oldCountersData } },\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: newCounter\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.ADD_TO_USED_NAMES:\r\n         const payload = action.payload.trim().toLowerCase();\r\n\r\n         if (payload && state.usedNames.every(w => !~w.indexOf(payload))) {\r\n            newState = {\r\n               ...state,\r\n               ...(!state.usedNames.includes(payload) && { usedNames: [...state.usedNames, payload] })\r\n            };\r\n\r\n            action.setStorageState(newState);\r\n\r\n            return { ...newState };\r\n         } else {\r\n            return { ...state };\r\n         }\r\n      case Actions.DELETE_FROM_USED_NAMES:\r\n         newState = {\r\n            ...state,\r\n            usedNames: state.usedNames.filter(n => n !== action.payload)\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return { ...newState };\r\n      case Actions.CHANGE_TIME:\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     value: {\r\n                        ...state.counters.data[action.id].value,\r\n                        [action.timeType]: +action.payload\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n      default:\r\n         return { ...state };\r\n   }\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownMenu } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Modes as ModeTypes } from \"../Utils\";\r\nimport { Actions } from '../Actions';\r\n\r\nexport const Modes = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const [isOpen, setIsOpen] = useState(false);\r\n\r\n   return (\r\n      <div style={{ position: 'absolute', top: '10px', right: '15px' }}>\r\n         <Dropdown isOpen={ isOpen } toggle={ () => setIsOpen(value => !value) }>\r\n            <DropdownToggle caret>{ state.mode }</DropdownToggle>\r\n            <DropdownMenu container=\"body\">\r\n               <DropdownItem onClick={() => dispatch({ type: Actions.CHANGE_MODE, mode: ModeTypes.Single })}>\r\n                  { ModeTypes.Single }\r\n               </DropdownItem>\r\n               <DropdownItem onClick={() => dispatch({ type: Actions.CHANGE_MODE, mode: ModeTypes.Multi })}>\r\n                  { ModeTypes.Multi }\r\n               </DropdownItem>\r\n            </DropdownMenu>\r\n         </Dropdown>\r\n      </div>\r\n   )\r\n}\r\n","import { useContext } from 'react';\r\nimport { AppContext } from '../Contexts/AppContext';\r\n\r\nimport './_inputHelper.css';\r\n\r\ninterface IInputHelperOptions {\r\n    currentInput: string;\r\n    onClick: Function;\r\n    onDelete: Function;\r\n}\r\n\r\nexport const InputHelper = ({ currentInput, onClick, onDelete }: IInputHelperOptions) => {\r\n    const [state] = useContext(AppContext);\r\n\r\n    return (\r\n        <div className='inputHelper bg-white d-flex flex-column position-absolute' style={{ top: '70px', zIndex: 10 }}>\r\n            { state.usedNames\r\n                .filter(n => ~n.indexOf(currentInput.toLowerCase()) && currentInput !== n)\r\n                .map(n => (\r\n                    <div className='inputHelper__item' key={ n }>\r\n                        <p className='inputHelper__text' onClick={ (evt) => { evt.stopPropagation(); onClick(n) }}>{ n }</p>\r\n                        <div onClick={ evt => { evt.stopPropagation(); onDelete(n) }}\r\n                             className='inputHelper__item-delete text-danger'>\r\n                            &times;\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n};\r\n","import { useContext, useState, useRef } from 'react';\r\nimport {CounterStates, IAction} from \"../Utils\";\r\nimport { Button } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Actions } from \"../Actions\";\r\nimport { InputHelper } from './inputHelper';\r\n\r\nexport const Counter = ({ id }: { id: string }) => {\r\n   const inputRef = useRef(null);\r\n   const [helperValue, setHelperValue] = useState('');\r\n   const [isHelperVisible, setIsHelperVisible] = useState(false);\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const [isEdit, setIsEdit] = useState(false);\r\n   const isPlaying = () => state.counters.data[id].state === CounterStates.Playing;\r\n   const onPausePlayClick = () => {\r\n      if (isPlaying()) return dispatch({ type: Actions.PAUSE, id });\r\n\r\n      dispatch({ type: Actions.PLAY, id });\r\n      const intervalId = setInterval(() => dispatch({ type: Actions.UPDATE_TIME, id }), 1000);\r\n      dispatch({ type: Actions.SET_INTERVAL_ID, intervalId, id });\r\n   };\r\n   const onStopClick = () => dispatch({ type: Actions.STOP, id });\r\n   const onDeleteClick = () => dispatch({ type: Actions.DELETE_AND_MOVE_TO_TABLE, id });\r\n   const onInputHelperClick = (value: string) => {\r\n      onChange({ target: { value }});\r\n      inputRef.current.focus();\r\n   }\r\n   const onChange = ({ target: { value }}: { target: Partial<HTMLInputElement> }) => {\r\n      if (!isEdit) return;\r\n\r\n      setIsHelperVisible(Boolean(value));\r\n      setHelperValue(value);\r\n      dispatch({ type: Actions.CHANGE_NAME_FROM_EXIST, payload: value, id });\r\n   };\r\n   const onBlur = ({ target: { value } }: { target: HTMLInputElement }) => {\r\n      setTimeout(() => setIsHelperVisible(false), 300);\r\n      dispatch({ type: Actions.ADD_TO_USED_NAMES, payload: value });\r\n   };\r\n   const onDeleteOldName = (payload: string) => {\r\n      setTimeout(() => { inputRef.current.focus(); setIsHelperVisible(true) }, 300);\r\n      dispatch({ type: Actions.DELETE_FROM_USED_NAMES, payload });\r\n   }\r\n   const onFocus = (currentName: string) => {\r\n      if (!isEdit) return;\r\n\r\n      setIsHelperVisible(Boolean(currentName));\r\n      setHelperValue(currentName);\r\n   }\r\n   const onEditClick = () => setIsEdit(value => !value);\r\n   const onTimeChange = (payload: string, timeType: IAction['timeType']) => {\r\n      if (!isEdit) return;\r\n\r\n      dispatch({ type: Actions.CHANGE_TIME, payload, timeType, id });\r\n   };\r\n\r\n   const { value: { hours, minutes, seconds }, name } = state.counters.data[id];\r\n\r\n   return (\r\n      <div style={{ border: '1px solid' }} className='d-flex flex-column position-relative pt-4 pb-4 bg-dark'>\r\n         <div className='position-absolute text-danger'\r\n              style={{ top: '-5px', right: '5px', fontSize: '20px', cursor: 'pointer' }}\r\n              onClick={ onDeleteClick }>\r\n            &times;\r\n         </div>\r\n         <div className='position-absolute text-danger'\r\n              style={{ top: '5px', right: '25px', fontSize: '10px', cursor: 'pointer' }}\r\n              onClick={ onEditClick }>\r\n            &#9998;\r\n         </div>\r\n         <input className='mb-3 mt-3 align-self-center text-white bg-dark'\r\n                style={{ maxWidth: '60%', border: 'transparent' }}\r\n                value={ name }\r\n                title={ name }\r\n                readOnly={ !isEdit }\r\n                ref={ inputRef }\r\n                onBlur={ onBlur }\r\n                onFocus={ () => onFocus(name) }\r\n                onChange={ onChange } />\r\n         { isHelperVisible && <InputHelper currentInput={ helperValue } onClick={ onInputHelperClick } onDelete={ onDeleteOldName } /> }\r\n         <div className='mb-5 justify-content-around d-flex text-white w-100'>\r\n            <input className='text-white d-flex text-center text-white bg-dark'\r\n                   style={{ border: 'none', maxWidth: '15%' }}\r\n                   value={ hours }\r\n                   onChange={ ({ target: { value } }) => onTimeChange(value, 'hours') }\r\n            />\r\n                :\r\n            <input className='text-white d-flex text-center text-white bg-dark'\r\n                   style={{ border: 'none', maxWidth: '15%' }}\r\n                   value={ minutes }\r\n                   onChange={ ({ target: { value } }) => onTimeChange(value, 'minutes') }\r\n            />\r\n                :\r\n            <input className='text-white d-flex text-center text-white bg-dark'\r\n                   style={{ border: 'none', maxWidth: '15%' }}\r\n                   value={ seconds }\r\n                   onChange={ ({ target: { value } }) => onTimeChange(value, 'seconds') }\r\n            />\r\n         </div>\r\n         <div className='justify-content-around d-flex'>\r\n            <Button color='success' onClick={ onPausePlayClick } style={{ flexBasis: '40%' }}>\r\n               { isPlaying() ? 'Пауза' : seconds === 0 ? 'Старт' : 'Продолжить' }\r\n            </Button>\r\n            { !isPlaying() && <Button color='success' style={{ flexBasis: '40%' }} onClick={ onStopClick }>Стоп</Button> }\r\n         </div>\r\n      </div>\r\n   )\r\n};\r\n","import { AppContext } from \"../Contexts/AppContext\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { Counter } from \"./Counter\";\r\nimport { useContext } from 'react';\r\n\r\nexport const Counters = () => {\r\n   const [state] = useContext(AppContext);\r\n\r\n   return (\r\n      <Row key='counters' className='mb-4'>\r\n         { state.counters.ids.map((id) => (\r\n            <Col md={4} key={id} className='mb-4'>\r\n               <Counter id={id} />\r\n            </Col>\r\n         )) }\r\n      </Row>\r\n   )\r\n}\r\n","import { useReducer } from 'react';\r\nimport { OldCounters } from \"./OldCounters\";\r\nimport { Container } from 'reactstrap';\r\nimport { CreateCounter } from './CreateCounter';\r\nimport { rootReducer } from '../Reducers/RootReducer';\r\nimport { AppContext } from '../Contexts/AppContext';\r\nimport { useLocalStorage } from '../Hooks/useLocalStorage';\r\nimport { IState, initialState, IAction } from '../Utils';\r\nimport { Modes } from './Modes';\r\nimport { Counters } from \"./Counters\";\r\n\r\nexport const App = () => {\r\n   const [storageState, setStorageState] = useLocalStorage({ keys: Object.keys(initialState) as Array<keyof IState> });\r\n   const [state, dispatch] = useReducer<typeof rootReducer>(rootReducer, { ...initialState, ...storageState });\r\n   const customDispatch = (data: Partial<IAction>) => dispatch({ ...data, setStorageState });\r\n\r\n   return (\r\n      <AppContext.Provider value={[state, customDispatch]}>\r\n         <Container fluid className='bg-primary' style={{ minHeight: '100vh', padding: '70px 3rem 20px' }}>\r\n            <Modes />\r\n            <OldCounters key='oldCounters' />\r\n            <Counters />\r\n            <CreateCounter key='createCounter'/>\r\n         </Container>\r\n      </AppContext.Provider>\r\n   )\r\n};\r\n","import { useState } from 'react';\r\nimport { IState } from \"../Utils\";\r\n\r\ntype UseLocalStorage = ({ keys, initialState }: { keys: Array<keyof IState>, initialState?: IState}) => [Partial<IState>, Function];\r\ntype ISetStorageProps = ((state: IState) => IState) | IState;\r\n\r\n\r\nexport const useLocalStorage: UseLocalStorage = ({ keys, initialState = {} }) => {\r\n   const commonState = {} as IState;\r\n   const initialKeys = Object.keys(initialState) as Array<keyof IState>;\r\n\r\n   initialKeys.forEach(k => {\r\n      localStorage.setItem(k, JSON.stringify(initialState[k]));\r\n   });\r\n\r\n   keys.forEach(k => {\r\n      const record = JSON.parse(localStorage.getItem(k) as string);\r\n\r\n      if (record !== null && record !== undefined) {\r\n         commonState[k] = record;\r\n      }\r\n   });\r\n\r\n   const [state, setState] = useState(commonState);\r\n\r\n   const storageSetState = (newState: ISetStorageProps) => {\r\n      let resultState: IState;\r\n\r\n      if (typeof newState === 'function') {\r\n         resultState = { ...state, ...newState(state) };\r\n      } else {\r\n         resultState = { ...state, ...newState };\r\n      }\r\n\r\n      keys.forEach(k => localStorage.setItem(k, JSON.stringify(resultState[k])));\r\n      setState(resultState);\r\n   };\r\n\r\n   return [state, storageSetState];\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport { App } from \"./Components/App\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}