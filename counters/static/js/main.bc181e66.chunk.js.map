{"version":3,"sources":["Utils.ts","Actions.ts","Contexts/AppContext.ts","Components/OldCounterItem.tsx","Components/OldCounterFolder.tsx","Components/OldCounters.tsx","Components/CreateCounter.tsx","Reducers/RootReducer.ts","Components/Modes.tsx","Components/Counter.tsx","Components/Counters.tsx","Components/App.tsx","Hooks/useLocalStorage.ts","index.tsx"],"names":["CounterStates","Modes","counterInitialValue","name","state","Pause","value","seconds","minutes","hours","intervalId","Actions","initialState","counters","ids","data","oldCounters","mode","Multi","getNewTime","newSeconds","newMinutes","newHours","AppContext","createContext","OldCounterItem","useContext","dispatch","id","className","type","title","style","background","border","textOverflow","onChange","evt","target","CHANGE_NAME_FROM_DELETED","payload","onChangeName","onClick","RESTORE_FROM_TABLE","onRestoreClick","DELETE_FROM_TABLE","onDeleteClick","OldCounterFolder","useState","isOpen","setIsOpen","stopPropagation","Collapse","Object","keys","map","k","isNode","OldCounters","result","forEach","date","Date","month","String","toLocaleString","dateCreated","getDate","length","Row","Col","CreateCounter","Button","CREATE_COUNTER","rootReducer","action","newState","STOP","Playing","clearInterval","PLAY","Single","countersData","PAUSE","UPDATE_TIME","setStorageState","SET_INTERVAL_ID","newId","getTime","push","DELETE_AND_MOVE_TO_TABLE","filter","oldCounter","counterData","counter","rest","CHANGE_NAME_FROM_EXIST","newIds","CHANGE_MODE","oldIds","newCounter","oldCountersData","position","top","right","Dropdown","toggle","DropdownToggle","caret","DropdownMenu","container","DropdownItem","ModeTypes","Counter","isPlaying","fontSize","cursor","maxWidth","color","setInterval","flexBasis","Counters","md","App","commonState","localStorage","setItem","JSON","stringify","record","parse","getItem","undefined","setState","resultState","useLocalStorage","storageState","useReducer","Provider","Container","fluid","minHeight","padding","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.bc181e66.chunk.js","sourcesContent":["import { Actions } from './Actions';\r\n\r\nexport enum CounterStates { Playing, Pause }\r\n\r\nexport const counterInitialValue: ICounterItem = {\r\n   name: 'без имени',\r\n   state: CounterStates.Pause,\r\n   value: {\r\n      seconds: 0,\r\n      minutes: 0,\r\n      hours: 0\r\n   },\r\n   intervalId: null\r\n};\r\n\r\nexport enum Modes { Single = 'single', Multi = 'multi' }\r\n\r\nexport const initialState: IState = {\r\n   counters: {\r\n      ids: [],\r\n      data: {}\r\n   },\r\n   oldCounters: {\r\n      ids: [],\r\n      data: {}\r\n   },\r\n   mode: Modes.Multi\r\n};\r\n\r\nexport const getNewTime = (state: ICounterValue) => {\r\n   const { seconds, minutes, hours } = state;\r\n\r\n   let newSeconds = seconds + 1;\r\n   let newMinutes = minutes;\r\n   let newHours = hours;\r\n\r\n   if (newSeconds === 60) {\r\n      newSeconds = 0;\r\n      newMinutes += 1;\r\n   }\r\n   if (newMinutes === 60) {\r\n      newMinutes = 0;\r\n      newHours += 1;\r\n   }\r\n\r\n   return {\r\n      seconds: newSeconds,\r\n      minutes: newMinutes,\r\n      hours: newHours\r\n   }\r\n}\r\n\r\nexport type CounterTypes = 'counters' | 'oldCounters';\r\n\r\nexport interface ICounterValue {\r\n   hours: number,\r\n   minutes: number,\r\n   seconds: number\r\n}\r\n\r\nexport interface ICounterItem {\r\n   value: ICounterValue;\r\n   state: CounterStates;\r\n   intervalId: NodeJS.Timeout | null;\r\n   name: string;\r\n}\r\n\r\nexport type IState = {\r\n   [K in CounterTypes]: {\r\n      ids: string[],\r\n      data: {\r\n         [key: string]: ICounterItem\r\n      }\r\n   }\r\n} & { mode: Modes }\r\n\r\nexport interface IAction {\r\n   setStorageState: Function;\r\n   id?: string;\r\n   type?: Actions;\r\n   payload?: string;\r\n   intervalId?: NodeJS.Timeout;\r\n   mode?: Modes;\r\n}\r\n\r\nexport type Node = { isNode: boolean; id?: string } & ICounterItem;\r\nexport type NodesRecord = Record<string, Node>;\r\nexport interface IOM { [K: string]: Node | NodesRecord | IOM; }\r\n","export enum Actions {\r\n   STOP = 'stop',\r\n   PLAY = 'play',\r\n   PAUSE = 'pause',\r\n   UPDATE_TIME = 'updateTime',\r\n   CREATE_COUNTER = 'createCounter',\r\n   SET_INTERVAL_ID = 'setIntervalId',\r\n   DELETE_AND_MOVE_TO_TABLE = 'deleteAndMoveToTable',\r\n   CHANGE_NAME_FROM_EXIST = 'changeNameFromExist',\r\n   CHANGE_NAME_FROM_DELETED = 'changeNameFromDeleted',\r\n   DELETE_FROM_TABLE = 'deleteFromTable',\r\n   CHANGE_MODE = 'changeMode',\r\n   RESTORE_FROM_TABLE = 'restoreFromTable'\r\n}\r\n","import { createContext } from 'react';\r\nimport { IAction, initialState } from \"../Utils\";\r\n\r\nexport const AppContext = createContext([initialState, (data: Partial<IAction>) => {}] as const);\r\n","import { AppContext } from \"../Contexts/AppContext\";\r\nimport { Actions } from \"../Actions\";\r\nimport { useContext } from \"react\";\r\nimport { Node } from \"../Utils\";\r\n\r\nimport './_oldCounterItem.css';\r\n\r\ninterface IOptions {\r\n    data: Node;\r\n}\r\n\r\nexport const OldCounterItem = ({ data }: IOptions) => {\r\n    const [, dispatch] = useContext(AppContext);\r\n    const { id, name, value: { hours, minutes, seconds } } = data;\r\n\r\n    const onDeleteClick = (id: string) => dispatch({ type: Actions.DELETE_FROM_TABLE, id });\r\n    const onRestoreClick = (id: string) => dispatch({ type: Actions.RESTORE_FROM_TABLE, id });\r\n    const onChangeName = ({ target: { value } } : { target: HTMLInputElement }, id: string) => (\r\n        dispatch({ type: Actions.CHANGE_NAME_FROM_DELETED, id, payload: value })\r\n    );\r\n\r\n    return (\r\n        <div className='oldCounterItem d-flex p-3 border-bottom align-items-center'>\r\n            <p className='oldCounterItem__item text-white'>\r\n                <input type='text'\r\n                       className='w-100 text-white'\r\n                       title={ name }\r\n                       value={ name }\r\n                       style={{ background: 'transparent', border: 'none', textOverflow: 'ellipsis' }}\r\n                       onChange={(evt) => onChangeName(evt, id)}\r\n                 />\r\n            </p>\r\n            <p className='oldCounterItem__item oldCounterItem__item--time text-white'>{ hours } : { minutes } : { seconds }</p>\r\n            <p className='oldCounterItem__item oldCounterItem__item--action' onClick={() => onRestoreClick(id)}>&#9874;</p>\r\n            <p className='oldCounterItem__item oldCounterItem__item--action text-danger' onClick={() => onDeleteClick(id)}>&times;</p>\r\n        </div>\r\n    );\r\n};\r\n","import { OldCounterItem } from \"./OldCounterItem\";\r\nimport { NodesRecord, Node, IOM } from \"../Utils\";\r\nimport { SyntheticEvent, useState } from 'react';\r\nimport { Collapse } from 'reactstrap';\r\n\r\ninterface IOptions {\r\n    name: keyof IOM;\r\n    data: IOM | NodesRecord;\r\n}\r\n\r\nexport const OldCounterFolder = ({ name, data }: IOptions) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const onClick = (evt: SyntheticEvent) => {\r\n        evt.stopPropagation();\r\n        setIsOpen(value => !value);\r\n    };\r\n\r\n    return (\r\n        <div key={ name } className='bg-dark pt-1 pb-1 pl-3 pr-3'>\r\n            <div className='text-white' onClick={ onClick }>{ name }</div>\r\n\r\n            <Collapse isOpen={ isOpen }>\r\n                { Object.keys(data).map(k => (\r\n                    data[k].isNode\r\n                        ? <OldCounterItem data={ data[k] as Node } key={ k } />\r\n                        : <OldCounterFolder data={ data[k] as IOM } name={ k } key={ k } />\r\n                )) }\r\n            </Collapse>\r\n        </div>\r\n    );\r\n}\r\n","import { AppContext } from \"../Contexts/AppContext\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { useContext } from 'react';\r\nimport { IOM, NodesRecord } from \"../Utils\";\r\nimport { OldCounterFolder } from \"./OldCounterFolder\";\r\n\r\nexport const OldCounters = () => {\r\n   const [state] = useContext(AppContext);\r\n   const result = {} as IOM;\r\n\r\n   const createStructure = () => {\r\n      state.oldCounters.ids.forEach(id => {\r\n         const date = new Date(+id);\r\n         const month = String(date.toLocaleString('default', { month: 'long' }));\r\n         const dateCreated = String(date.getDate());\r\n\r\n         if (!result[month]) {\r\n            result[month] = {};\r\n         }\r\n\r\n         if (!(result[month] as IOM)[dateCreated]) {\r\n            (result[month] as IOM)[dateCreated] = {};\r\n         }\r\n\r\n         ((result[month] as IOM)[dateCreated] as NodesRecord)[id] = {\r\n            ...state.oldCounters.data[id], id: id, isNode: true\r\n         };\r\n      });\r\n   }\r\n\r\n   createStructure();\r\n\r\n   if (!state.oldCounters.ids.length) {\r\n      return <></>\r\n   }\r\n\r\n   return (\r\n      <Row className='overflow-auto'>\r\n         <Col className='mb-5'>\r\n            { Object.keys(result).map(k => (\r\n               <OldCounterFolder data={ result[k] as IOM } name={ k } key={ k } />\r\n            )) }\r\n         </Col>\r\n      </Row>\r\n   )\r\n};\r\n","import { useContext } from 'react';\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Button, Row, Col } from \"reactstrap\";\r\nimport { Actions } from \"../Actions\";\r\n\r\nexport const CreateCounter = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const createCounter = () => dispatch({ type: Actions.CREATE_COUNTER });\r\n\r\n   return (\r\n      <Row>\r\n         <Col>\r\n            <Button onClick={ createCounter }>{ state.counters.ids.length ? 'Ещё счётчик' : 'Создать счётчик' }</Button>\r\n         </Col>\r\n      </Row>\r\n   )\r\n}\r\n","import {\r\n   getNewTime,\r\n   counterInitialValue,\r\n   CounterStates,\r\n   Modes,\r\n   IState,\r\n   IAction,\r\n   CounterTypes, ICounterItem\r\n} from \"../Utils\";\r\nimport { Actions } from '../Actions';\r\n\r\nexport const rootReducer = (state: IState, action: IAction): IState => {\r\n   let newState: IState;\r\n\r\n   switch (action.type) {\r\n      case Actions.STOP:\r\n         if (state.counters.data[action.id].state === CounterStates.Playing) {\r\n            clearInterval(state.counters.data[action.id].intervalId);\r\n         }\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: CounterStates.Pause,\r\n                     value: counterInitialValue.value\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case Actions.PLAY:\r\n         if (state.mode === Modes.Single) {\r\n            const countersData = {} as IState[CounterTypes]['data'];\r\n\r\n            state.counters.ids.forEach(id => {\r\n               countersData[id] = {\r\n                  ...state.counters.data[id],\r\n                  state: CounterStates.Pause\r\n               }\r\n\r\n               if (countersData[id].intervalId !== null) {\r\n                  clearInterval(countersData[id].intervalId);\r\n                  countersData[id].intervalId = null;\r\n               }\r\n            });\r\n\r\n\r\n            return {\r\n               ...state,\r\n               counters: {\r\n                  ...state.counters,\r\n                  data: {\r\n                     ...countersData,\r\n                     [action.id]: {\r\n                        ...state.counters.data[action.id],\r\n                        state: CounterStates.Playing,\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         } else {\r\n            return {\r\n               ...state,\r\n               counters: {\r\n                  ...state.counters,\r\n                  data: {\r\n                     ...state.counters.data,\r\n                     [action.id]: {\r\n                        ...state.counters.data[action.id],\r\n                        state: CounterStates.Playing,\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case Actions.PAUSE:\r\n         clearInterval(state.counters.data[action.id].intervalId);\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: CounterStates.Pause\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case Actions.UPDATE_TIME:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     value: getNewTime(state.counters.data[action.id].value)\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState({\r\n            ...newState,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: CounterStates.Pause\r\n                  }\r\n               }\r\n            }\r\n         });\r\n\r\n         return newState;\r\n      case Actions.SET_INTERVAL_ID:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     intervalId: action.intervalId\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CREATE_COUNTER:\r\n         const newId = String(new Date().getTime());\r\n         state.counters.ids.push(newId);\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [newId]: { ...counterInitialValue }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.DELETE_AND_MOVE_TO_TABLE:\r\n         const ids = state.counters.ids.filter(id => id !== action.id);\r\n         let oldCounter = {} as ICounterItem;\r\n         const counterData = (({ [action.id]: counter, ...rest }) => {\r\n            const { seconds = 0, minutes = 0, hours = 0 } = counter?.value;\r\n\r\n            if (seconds !== 0 || minutes !== 0 || hours !== 0) {\r\n               oldCounter = { ...counter };\r\n               state.oldCounters.ids.push(action.id);\r\n            }\r\n\r\n            return rest;\r\n         })(state.counters.data);\r\n\r\n         if (state.counters.data[action.id].intervalId) {\r\n            clearInterval(state.counters.data[action.id].intervalId);\r\n         }\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: {\r\n               ...state.oldCounters,\r\n               data: {\r\n                  ...state.oldCounters.data,\r\n                  [action.id]: oldCounter\r\n               }\r\n            },\r\n            counters: { ids, data: counterData }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CHANGE_NAME_FROM_EXIST:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     name: action.payload\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CHANGE_NAME_FROM_DELETED:\r\n         newState = {\r\n            ...state,\r\n            oldCounters: {\r\n               ...state.oldCounters,\r\n               data: {\r\n                  ...state.oldCounters.data,\r\n                  [action.id]: {\r\n                     ...state.oldCounters.data[action.id],\r\n                     name: action.payload\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.DELETE_FROM_TABLE:\r\n         const data = (({ [action.id]:_, ...rest }) => rest)(state.oldCounters.data);\r\n         const newIds = state.oldCounters.ids.filter(id => action.id !== id);\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: { ids: newIds, data }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CHANGE_MODE:\r\n         if (action.mode !== state.mode) {\r\n            newState = {\r\n               ...state,\r\n               mode: action.mode\r\n            }\r\n\r\n            action.setStorageState(newState);\r\n\r\n            return newState;\r\n         }\r\n\r\n         return { ...state };\r\n      case Actions.RESTORE_FROM_TABLE:\r\n         const oldIds = state.oldCounters.ids.filter(id => id !== action.id);\r\n         let newCounter = {} as ICounterItem;\r\n\r\n         const oldCountersData = (({ [action.id]: counter, ...rest }) => {\r\n            newCounter = { ...counter };\r\n            state.counters.ids.push(action.id);\r\n\r\n            return rest;\r\n         })(state.oldCounters.data);\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: { ids: oldIds, data: { ...oldCountersData } },\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: newCounter\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      default:\r\n         return { ...state };\r\n   }\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownMenu } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Modes as ModeTypes } from \"../Utils\";\r\nimport { Actions } from '../Actions';\r\n\r\nexport const Modes = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const [isOpen, setIsOpen] = useState(false);\r\n\r\n   return (\r\n      <div style={{ position: 'fixed', top: '10px', right: '15px' }}>\r\n         <Dropdown isOpen={ isOpen } toggle={ () => setIsOpen(value => !value) }>\r\n            <DropdownToggle caret>{ state.mode }</DropdownToggle>\r\n            <DropdownMenu container=\"body\">\r\n               <DropdownItem onClick={() => dispatch({ type: Actions.CHANGE_MODE, mode: ModeTypes.Single })}>\r\n                  { ModeTypes.Single }\r\n               </DropdownItem>\r\n               <DropdownItem onClick={() => dispatch({ type: Actions.CHANGE_MODE, mode: ModeTypes.Multi })}>\r\n                  { ModeTypes.Multi }\r\n               </DropdownItem>\r\n            </DropdownMenu>\r\n         </Dropdown>\r\n      </div>\r\n   )\r\n}\r\n","import { useContext } from 'react';\r\nimport { CounterStates } from \"../Utils\";\r\nimport { Button } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Actions } from \"../Actions\";\r\n\r\nexport const Counter = ({ id }: { id: string }) => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const isPlaying = () => state.counters.data[id].state === CounterStates.Playing;\r\n   const onPausePlayClick = () => {\r\n      if (isPlaying()) {\r\n         dispatch({ type: Actions.PAUSE, id });\r\n      } else {\r\n         dispatch({ type: Actions.PLAY, id });\r\n         const intervalId = setInterval(() => dispatch({ type: Actions.UPDATE_TIME, id }), 1000);\r\n         dispatch({ type: Actions.SET_INTERVAL_ID, intervalId, id });\r\n      }\r\n   };\r\n   const onStopClick = () => dispatch({ type: Actions.STOP, id });\r\n   const onDeleteClick = () => dispatch({ type: Actions.DELETE_AND_MOVE_TO_TABLE, id });\r\n   const onNameChange = ({ target: { value } }: { target: HTMLInputElement }) => (\r\n       dispatch({ type: Actions.CHANGE_NAME_FROM_EXIST, payload: value, id })\r\n   );\r\n\r\n   const { value: { hours, minutes, seconds }, name } = state.counters.data[id];\r\n\r\n   return (\r\n      <div style={{ border: '1px solid' }} className='d-flex flex-column position-relative pt-4 pb-4 bg-dark'>\r\n         <div className='position-absolute text-danger'\r\n              style={{ top: '-5px', right: '5px', fontSize: '20px', cursor: 'pointer' }}\r\n              onClick={ onDeleteClick }>\r\n            &times;\r\n         </div>\r\n         <input className='mb-3 mt-3 align-self-center text-white bg-dark'\r\n                style={{ maxWidth: '60%', border: 'transparent' }}\r\n                value={ name }\r\n                title={ name }\r\n                onChange={ onNameChange } />\r\n         <div className='mb-5 justify-content-around d-flex'>\r\n            <div className='text-white'>\r\n               { hours } :\r\n            </div>\r\n            <div className='text-white'>\r\n               { minutes } :\r\n            </div>\r\n            <div className='text-white'>\r\n               { seconds }\r\n            </div>\r\n         </div>\r\n         <div className='justify-content-around d-flex'>\r\n            <Button color='success' onClick={ onPausePlayClick } style={{ flexBasis: '40%' }}>\r\n               { isPlaying() ? 'Пауза' : seconds === 0 ? 'Старт' : 'Продолжить' }\r\n            </Button>\r\n            { !isPlaying() && <Button color='success' style={{ flexBasis: '40%' }} onClick={ onStopClick }>Стоп</Button> }\r\n         </div>\r\n      </div>\r\n   )\r\n};\r\n","import { AppContext } from \"../Contexts/AppContext\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { Counter } from \"./Counter\";\r\nimport { useContext } from 'react';\r\n\r\nexport const Counters = () => {\r\n   const [state] = useContext(AppContext);\r\n\r\n   return (\r\n      <Row key='counters' className='mb-4'>\r\n         { state.counters.ids.map((id) => (\r\n            <Col md={4} key={id} className='mb-4'>\r\n               <Counter id={id} />\r\n            </Col>\r\n         )) }\r\n      </Row>\r\n   )\r\n}\r\n","import { useReducer } from 'react';\r\nimport { OldCounters } from \"./OldCounters\";\r\nimport { Container } from 'reactstrap';\r\nimport { CreateCounter } from './CreateCounter';\r\nimport { rootReducer } from '../Reducers/RootReducer';\r\nimport { AppContext } from '../Contexts/AppContext';\r\nimport { useLocalStorage } from '../Hooks/useLocalStorage';\r\nimport { IState, initialState, IAction } from '../Utils';\r\nimport { Modes } from './Modes';\r\nimport { Counters } from \"./Counters\";\r\n\r\nexport const App = () => {\r\n   const [storageState, setStorageState] = useLocalStorage({ keys: Object.keys(initialState) as Array<keyof IState> });\r\n   const [state, dispatch] = useReducer<typeof rootReducer>(rootReducer, { ...initialState, ...storageState });\r\n   const customDispatch = (data: Partial<IAction>) => dispatch({ ...data, setStorageState });\r\n\r\n   return (\r\n      <AppContext.Provider value={[state, customDispatch]}>\r\n         <Container fluid className='bg-primary' style={{ minHeight: '100vh', padding: '70px 3rem 20px' }}>\r\n            <Modes />\r\n            <OldCounters key='oldCounters' />\r\n            <Counters />\r\n            <CreateCounter key='createCounter'/>\r\n         </Container>\r\n      </AppContext.Provider>\r\n   )\r\n};\r\n","import { useState } from 'react';\r\nimport { IState } from \"../Utils\";\r\n\r\ntype UseLocalStorage = ({ keys, initialState }: { keys: Array<keyof IState>, initialState?: IState}) => [Partial<IState>, Function];\r\ntype ISetStorageProps = ((state: IState) => IState) | IState;\r\n\r\n\r\nexport const useLocalStorage: UseLocalStorage = ({ keys, initialState = {} }) => {\r\n   const commonState = {} as IState;\r\n   const initialKeys = Object.keys(initialState) as Array<keyof IState>;\r\n\r\n   initialKeys.forEach(k => {\r\n      localStorage.setItem(k, JSON.stringify(initialState[k]));\r\n   });\r\n\r\n   keys.forEach(k => {\r\n      const record = JSON.parse(localStorage.getItem(k) as string);\r\n\r\n      if (record !== null && record !== undefined) {\r\n         commonState[k] = record;\r\n      }\r\n   });\r\n\r\n   const [state, setState] = useState(commonState);\r\n\r\n   const storageSetState = (newState: ISetStorageProps) => {\r\n      let resultState: IState;\r\n\r\n      if (typeof newState === 'function') {\r\n         resultState = { ...state, ...newState(state) };\r\n      } else {\r\n         resultState = { ...state, ...newState };\r\n      }\r\n\r\n      keys.forEach(k => localStorage.setItem(k, JSON.stringify(resultState[k])));\r\n      setState(resultState);\r\n   };\r\n\r\n   return [state, storageSetState];\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport { App } from \"./Components/App\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}