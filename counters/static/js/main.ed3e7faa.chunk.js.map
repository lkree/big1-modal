{"version":3,"sources":["Utils.js","Contexts/AppContext.js","Actions.js","Components/Counter.js","Components/OldCounters.js","Components/CreateCounter.js","Reducers/RootReducer.js","Components/Modes.js","Components/App.js","Hooks/useLocalStorage.js","index.js"],"names":["counterStates","counterInitialValue","name","state","value","seconds","minutes","hours","intervalId","modes","getNewTime","newSeconds","newMinutes","newHours","AppContext","createContext","STOP","PLAY","PAUSE","UPDATE_TIME","CREATE_COUNTER","SET_INTERVAL_ID","DELETE_AND_MOVE_TO_TABLE","CHANGE_NAME","DELETE_FROM_TABLE","CHANGE_MODE","RESTORE_FROM_TABLE","Counter","id","useContext","dispatch","isPlaying","counters","data","style","border","className","top","right","fontSize","cursor","onClick","type","maxWidth","title","onChange","target","payload","Button","color","setInterval","flexBasis","OldCounters","oldCounters","ids","length","Row","md","Col","Table","dark","map","Date","toLocaleString","split","onRestoreClick","onDeleteClick","CreateCounter","rootReducer","action","newState","actions","clearInterval","mode","countersData","forEach","setStorageState","newId","getTime","push","filter","oldCounter","counterData","counter","rest","newIds","oldIds","newCounter","oldCountersData","Modes","useState","isOpen","setIsOpen","position","Dropdown","toggle","DropdownToggle","caret","DropdownMenu","container","DropdownItem","initialState","App","keys","commonState","initialKeys","Object","k","localStorage","setItem","record","JSON","parse","getItem","undefined","setState","resultState","stringify","useLocalStorage","storageState","useReducer","Provider","Container","fluid","height","padding","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.ed3e7faa.chunk.js","sourcesContent":["export const counterStates = { playing: 1, pause: 2 };\r\nexport const counterInitialValue = {\r\n   name: 'без имени',\r\n   state: counterStates.pause,\r\n   value: {\r\n      seconds: 0,\r\n      minutes: 0,\r\n      hours: 0\r\n   },\r\n   intervalId: null\r\n};\r\nexport const modes = { single: 'single', multi: 'multi' };\r\n\r\nexport const getNewTime = (state) => {\r\n   const { seconds, minutes, hours } = state;\r\n\r\n   let newSeconds = seconds + 1;\r\n   let newMinutes = minutes;\r\n   let newHours = hours;\r\n\r\n   if (newSeconds === 60) {\r\n      newSeconds = 0;\r\n      newMinutes += 1;\r\n   }\r\n   if (newMinutes === 60) {\r\n      newMinutes = 0;\r\n      newHours += 1;\r\n   }\r\n\r\n   return {\r\n      seconds: newSeconds,\r\n      minutes: newMinutes,\r\n      hours: newHours\r\n   }\r\n}\r\n","import { createContext } from 'react';\r\n\r\nexport const AppContext = createContext(null);\r\n","export const STOP = 'stop';\r\nexport const PLAY = 'play';\r\nexport const PAUSE = 'pause';\r\nexport const UPDATE_TIME = 'updateTime';\r\nexport const CREATE_COUNTER = 'createCounter';\r\nexport const SET_INTERVAL_ID = 'setIntervalId';\r\nexport const DELETE_AND_MOVE_TO_TABLE = 'deleteAndMoveToTable';\r\nexport const CHANGE_NAME = 'changeName';\r\nexport const DELETE_FROM_TABLE = 'deleteFromTable';\r\nexport const CHANGE_MODE = 'changeMode';\r\nexport const RESTORE_FROM_TABLE = 'restoreFromTable';\r\n","import { useContext } from 'react';\r\nimport { counterStates } from \"../Utils\";\r\nimport { Button } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { PAUSE, PLAY, STOP, UPDATE_TIME, DELETE_AND_MOVE_TO_TABLE, CHANGE_NAME, SET_INTERVAL_ID } from \"../Actions\";\r\n\r\nconst Counter = ({ id }) => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const isPlaying = () => state.counters.data[id].state === counterStates.playing;\r\n   const onPausePlayClick = () => {\r\n      if (isPlaying()) {\r\n         dispatch({ type: PAUSE, id });\r\n      } else {\r\n         dispatch({ type: PLAY, id });\r\n         const intervalId = setInterval(() => dispatch({ type: UPDATE_TIME, id }), 1000);\r\n         dispatch({ type: SET_INTERVAL_ID, intervalId, id });\r\n      }\r\n   };\r\n   const onStopClick = () => dispatch({ type: STOP, id });\r\n   const onDeleteClick = () => dispatch({ type: DELETE_AND_MOVE_TO_TABLE, id });\r\n   const onNameChange = ({ target: { value } }) => dispatch({ type: CHANGE_NAME, payload: value, id });\r\n\r\n   const { value: { hours, minutes, seconds }, name } = state.counters.data[id];\r\n\r\n   return (\r\n      <div style={{ border: '1px solid' }} className='d-flex flex-column position-relative pt-4 pb-4 bg-dark'>\r\n         <div className='position-absolute text-danger'\r\n              style={{ top: '-5px', right: '5px', fontSize: '20px', cursor: 'pointer' }}\r\n              onClick={ onDeleteClick }>\r\n            &times;\r\n         </div>\r\n         <input className='mb-3 mt-3 align-self-center text-white bg-dark'\r\n                style={{ maxWidth: '60%' }}\r\n                value={ name }\r\n                title={ name }\r\n                onChange={ onNameChange } />\r\n         <div className='mb-5 justify-content-around d-flex'>\r\n            <div className='text-white' key='hours'>\r\n               { hours } :\r\n            </div>\r\n            <div className='text-white' key='minutes'>\r\n               { minutes } :\r\n            </div>\r\n            <div className='text-white' key='seconds'>\r\n               { seconds }\r\n            </div>\r\n         </div>\r\n         <div className='justify-content-around d-flex'>\r\n            <Button color='success' onClick={ onPausePlayClick } style={{ flexBasis: '40%' }}>\r\n               { isPlaying() ? 'Пауза' : seconds === 0 ? 'Старт' : 'Продолжить' }\r\n            </Button>\r\n            { !isPlaying() && <Button color='success' style={{ flexBasis: '40%' }} onClick={ onStopClick }>Стоп</Button> }\r\n         </div>\r\n      </div>\r\n   )\r\n};\r\n\r\nexport default Counter;\r\n","import { useContext } from 'react';\r\nimport { Col, Row, Table } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { DELETE_FROM_TABLE, RESTORE_FROM_TABLE } from \"../Actions\";\r\n\r\nconst OldCounters = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const onDeleteClick = (id) => dispatch({ type: DELETE_FROM_TABLE, id });\r\n   const onRestoreClick = (id) => dispatch({ type: RESTORE_FROM_TABLE, id });\r\n\r\n   if (!state.oldCounters.ids.length) {\r\n      return <></>\r\n   }\r\n\r\n   return (\r\n      <Row md='2'>\r\n         <Col className='mb-5'>\r\n            <Table dark>\r\n         <thead>\r\n            <tr>\r\n               <td>Дата</td>\r\n               <td>Имя</td>\r\n               <td>Время</td>\r\n               <td></td>\r\n               <td></td>\r\n            </tr>\r\n         </thead>\r\n         <tbody>\r\n            { state.oldCounters.ids.map(id => {\r\n               const { name, value: { seconds, minutes, hours } } = state.oldCounters.data[id];\r\n\r\n               return (\r\n                     <tr key={id}>\r\n                        <td>{ new Date(id).toLocaleString().split(',')[0] }</td>\r\n                        <td>{ name }</td>\r\n                        <td>{ hours } : { minutes } : { seconds }</td>\r\n                        <td onClick={() => onRestoreClick(id)}>&#9874;</td>\r\n                        <td onClick={() => onDeleteClick(id)}>&times;</td>\r\n                     </tr>\r\n                  )\r\n            }) }\r\n         </tbody>\r\n      </Table>\r\n         </Col>\r\n      </Row>\r\n   )\r\n};\r\n\r\nexport default OldCounters;\r\n","import { useContext } from 'react';\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Button, Row } from \"reactstrap\";\r\nimport { CREATE_COUNTER } from \"../Actions\";\r\n\r\nexport const CreateCounter = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const createCounter = () => dispatch({ type: CREATE_COUNTER });\r\n\r\n   return (\r\n      <Row>\r\n         <Button onClick={ createCounter }>{ state.counters.ids.length ? 'Ещё счётчик' : 'Создать счётчик' }</Button>\r\n      </Row>\r\n   )\r\n}\r\n","import * as actions from './../Actions';\r\nimport {getNewTime, counterInitialValue, counterStates, modes} from \"../Utils\";\r\nimport {RESTORE_FROM_TABLE} from \"./../Actions\";\r\n\r\nexport const rootReducer = (state, action) => {\r\n   let newState;\r\n\r\n   switch (action.type) {\r\n      case actions.STOP:\r\n         if (state.counters.data[action.id].state === counterStates.playing) {\r\n            clearInterval(state.counters.data[action.id].intervalId);\r\n         }\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: counterStates.pause,\r\n                     value: counterInitialValue.value\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case actions.PLAY:\r\n         if (state.mode === modes.single) {\r\n            const countersData = {};\r\n\r\n            state.counters.ids.forEach(id => {\r\n               countersData[id] = {\r\n                  ...state.counters.data[id],\r\n                  state: counterStates.pause\r\n               }\r\n\r\n               if (countersData[id].intervalId !== null) {\r\n                  clearInterval(countersData[id].intervalId);\r\n                  countersData[id].intervalId = null;\r\n               }\r\n            });\r\n\r\n\r\n            return {\r\n               ...state,\r\n               counters: {\r\n                  ...state.counters,\r\n                  data: {\r\n                     ...countersData,\r\n                     [action.id]: {\r\n                        ...state.counters.data[action.id],\r\n                        state: counterStates.playing,\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         } else {\r\n            return {\r\n               ...state,\r\n               counters: {\r\n                  ...state.counters,\r\n                  data: {\r\n                     ...state.counters.data,\r\n                     [action.id]: {\r\n                        ...state.counters.data[action.id],\r\n                        state: counterStates.playing,\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case actions.PAUSE:\r\n         clearInterval(state.counters.data[action.id].intervalId);\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: counterStates.pause\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case actions.UPDATE_TIME:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     value: getNewTime(state.counters.data[action.id].value)\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState({\r\n            ...newState,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: counterStates.pause\r\n                  }\r\n               }\r\n            }\r\n         });\r\n\r\n         return newState;\r\n      case actions.SET_INTERVAL_ID:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     intervalId: action.intervalId\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.CREATE_COUNTER:\r\n         const newId = new Date().getTime();\r\n         state.counters.ids.push(newId);\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [newId]: { ...counterInitialValue }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.DELETE_AND_MOVE_TO_TABLE:\r\n         const ids = state.counters.ids.filter(id => id !== action.id);\r\n         let oldCounter = {};\r\n         const counterData = (({ [action.id]: counter, ...rest }) => {\r\n            const { seconds = 0, minutes = 0, hours = 0 } = counter?.value;\r\n\r\n            if (seconds !== 0 || minutes !== 0 || hours !== 0) {\r\n               oldCounter = { ...counter };\r\n               state.oldCounters.ids.push(action.id);\r\n            }\r\n\r\n            return rest;\r\n         })(state.counters.data);\r\n\r\n         if (state.counters.data[action.id].intervalId) {\r\n            clearInterval(state.counters.data[action.id].intervalId);\r\n         }\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: {\r\n               ...state.oldCounters,\r\n               data: {\r\n                  ...state.oldCounters.data,\r\n                  [action.id]: oldCounter\r\n               }\r\n            },\r\n            counters: { ids, data: counterData }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.CHANGE_NAME:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     name: action.payload\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.DELETE_FROM_TABLE:\r\n         const data = (({ [action.id]:_, ...rest }) => rest)(state.oldCounters.data);\r\n         const newIds = state.oldCounters.ids.filter(id => action.id !== id);\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: { ids: newIds, data }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.CHANGE_MODE:\r\n         if (action.mode !== state.mode) {\r\n            newState = {\r\n               ...state,\r\n               mode: action.mode\r\n            }\r\n\r\n            action.setStorageState(newState);\r\n\r\n            return newState;\r\n         }\r\n\r\n         return { ...state };\r\n      case actions.RESTORE_FROM_TABLE:\r\n         const oldIds = state.oldCounters.ids.filter(id => id !== action.id);\r\n         let newCounter = {};\r\n\r\n         const oldCountersData = (({ [action.id]: counter, ...rest }) => {\r\n            newCounter = { ...counter };\r\n            state.counters.ids.push(action.id);\r\n\r\n            return rest;\r\n         })(state.oldCounters.data);\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: { ids: oldIds, data: { ...oldCountersData } },\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: newCounter\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      default:\r\n         return { ...state };\r\n   }\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownMenu } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { modes } from \"../Utils\";\r\nimport { CHANGE_MODE } from '../Actions';\r\n\r\nexport const Modes = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const [isOpen, setIsOpen] = useState(false);\r\n\r\n   return (\r\n      <div className='' style={{ position: 'fixed', top: '10px', right: '15px' }}>\r\n         <Dropdown isOpen={ isOpen } toggle={ () => setIsOpen(value => !value) }>\r\n            <DropdownToggle caret>{ state.mode }</DropdownToggle>\r\n            <DropdownMenu container=\"body\">\r\n               <DropdownItem onClick={() => dispatch({ type: CHANGE_MODE, mode: modes.single })}>{ modes.single }</DropdownItem>\r\n               <DropdownItem onClick={() => dispatch({ type: CHANGE_MODE, mode: modes.multi })}>{ modes.multi }</DropdownItem>\r\n            </DropdownMenu>\r\n         </Dropdown>\r\n      </div>\r\n   )\r\n}\r\n","import { useReducer } from 'react';\r\nimport Counter from \"./Counter\";\r\nimport OldCounters from \"./OldCounters\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { CreateCounter } from './CreateCounter';\r\nimport { rootReducer } from '../Reducers/RootReducer';\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { useLocalStorage } from \"../Hooks/useLocalStorage\";\r\nimport { modes } from \"../Utils\";\r\nimport { Modes } from './Modes';\r\n\r\nconst initialState = {\r\n   counters: {\r\n      ids: [],\r\n      data: {}\r\n   },\r\n   oldCounters: {\r\n      ids: [],\r\n      data: []\r\n   },\r\n   mode: modes.multi\r\n};\r\n\r\nconst App = () => {\r\n   const [storageState, setStorageState] = useLocalStorage({ keys: ['counters', 'oldCounters', 'mode'] });\r\n   const [state, dispatch] = useReducer(rootReducer, { ...initialState, ...storageState }, (state) => state);\r\n   const customDispatch = (data) => dispatch({ ...data, setStorageState });\r\n\r\n   return (\r\n      <AppContext.Provider value={[state, customDispatch]}>\r\n         <Container fluid className='bg-primary' style={{ height: '100vh', padding: '70px 3rem 20px' }}>\r\n            <Modes />\r\n            <OldCounters key='oldCounters' />\r\n            <Row key='counters' className='mb-4'>\r\n               { state.counters.ids.map((id) => (\r\n                  <Col md={4} key={id} className='mb-4'>\r\n                     <Counter id={id} />\r\n                  </Col>\r\n               )) }\r\n            </Row>\r\n            <CreateCounter key='createCounter'/>\r\n         </Container>\r\n      </AppContext.Provider>\r\n   )\r\n};\r\n\r\nexport default App;\r\n","import { useState } from 'react';\r\n\r\nexport const useLocalStorage = ({ keys, initialState = {} }) => {\r\n   const commonState = {};\r\n   const initialKeys = Object.keys(initialState);\r\n\r\n   initialKeys.forEach(k => {\r\n      localStorage.setItem(k, initialKeys[k]);\r\n   });\r\n   keys.forEach(k => {\r\n      const record = JSON.parse(localStorage.getItem(k));\r\n\r\n      if (record !== null && record !== undefined) {\r\n         commonState[k] = record;\r\n      }\r\n   });\r\n\r\n   const [state, setState] = useState(commonState);\r\n\r\n   const storageSetState = (newState) => {\r\n      let resultState;\r\n\r\n      if (typeof newState === 'function') {\r\n         resultState = { ...state, ...newState(state) };\r\n      } else if (typeof newState === 'object') {\r\n         resultState = { ...state, ...newState };\r\n      } else {\r\n         resultState = { [keys[0]]: newState };\r\n      }\r\n\r\n      keys.forEach(k => localStorage.setItem(k, JSON.stringify(resultState[k])));\r\n      setState(resultState);\r\n   };\r\n\r\n   return [state, storageSetState];\r\n}\r\n","import * as React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./Components/App\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}