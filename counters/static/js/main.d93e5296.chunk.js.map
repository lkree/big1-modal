{"version":3,"sources":["Utils.js","Contexts/AppContext.js","Actions.js","Components/Counter.js","Components/OldCounters.js","Components/CreateCounter.js","Reducers/RootReducer.js","Components/App.js","Hooks/useLocalStorage.js","index.js"],"names":["counterStates","counterInitialValue","name","state","value","seconds","minutes","hours","getNewTime","newSeconds","newMinutes","newHours","AppContext","createContext","STOP","PLAY","PAUSE","UPDATE_TIME","CREATE_COUNTER","DELETE_AND_MOVE_TO_TABLE","CHANGE_NAME","DELETE_FROM_TABLE","Counter","id","useContext","dispatch","useState","intervalId","setIntervalId","isPlaying","counters","data","style","border","className","top","right","fontSize","cursor","onClick","type","maxWidth","onChange","target","payload","Button","color","setInterval","OldCounters","oldCounters","ids","length","Row","md","Col","Table","dark","map","Date","toDateString","onDeleteClick","CreateCounter","rootReducer","action","newState","actions","clearInterval","setStorageState","newId","getTime","push","filter","oldCounter","counterData","counter","rest","newIds","initialState","App","keys","commonState","initialKeys","Object","forEach","k","localStorage","setItem","JSON","parse","getItem","setState","resultState","stringify","useLocalStorage","storageState","isStorageExists","every","Boolean","useReducer","Provider","Container","fluid","height","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d93e5296.chunk.js","sourcesContent":["export const counterStates = { playing: 1, pause: 2 };\r\nexport const counterInitialValue = {\r\n   name: 'без имени',\r\n   state: counterStates.pause,\r\n   value: {\r\n      seconds: 0,\r\n      minutes: 0,\r\n      hours: 0\r\n   }\r\n};\r\n\r\nexport const getNewTime = (state) => {\r\n   const { seconds, minutes, hours } = state;\r\n\r\n   let newSeconds = seconds + 1;\r\n   let newMinutes = minutes;\r\n   let newHours = hours;\r\n\r\n   if (newSeconds === 60) {\r\n      newSeconds = 0;\r\n      newMinutes += 1;\r\n   }\r\n   if (newMinutes === 60) {\r\n      newMinutes = 0;\r\n      newHours += 1;\r\n   }\r\n\r\n   return {\r\n      seconds: newSeconds,\r\n      minutes: newMinutes,\r\n      hours: newHours\r\n   }\r\n}\r\n","import { createContext } from 'react';\r\n\r\nexport const AppContext = createContext(null);\r\n","export const STOP = 'stop';\r\nexport const PLAY = 'play';\r\nexport const PAUSE = 'pause';\r\nexport const UPDATE_TIME = 'updateTime';\r\nexport const CREATE_COUNTER = 'createCounter';\r\nexport const DELETE_AND_MOVE_TO_TABLE = 'deleteAndMoveToTable';\r\nexport const CHANGE_NAME = 'changeName';\r\nexport const DELETE_FROM_TABLE = 'deleteFromTable';\r\n","import { useContext, useState } from 'react';\r\nimport { counterStates } from \"../Utils\";\r\nimport { Button } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { PAUSE, PLAY, STOP, UPDATE_TIME, DELETE_AND_MOVE_TO_TABLE, CHANGE_NAME } from \"../Actions\";\r\n\r\nconst Counter = ({ id }) => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const [intervalId, setIntervalId] = useState(null);\r\n   const isPlaying = () => state.counters.data[id].state === counterStates.playing;\r\n   const onPausePlayClick = () => {\r\n      if (isPlaying()) {\r\n         dispatch({ type: PAUSE, intervalId, id });\r\n      } else {\r\n         dispatch({ type: PLAY, id });\r\n         setIntervalId(setInterval(() => dispatch({ type: UPDATE_TIME, id }), 1000));\r\n      }\r\n   };\r\n   const onStopClick = () => dispatch({ type: STOP, intervalId, id });\r\n   const onDeleteClick = () => dispatch({ type: DELETE_AND_MOVE_TO_TABLE, id, intervalId });\r\n   const onNameChange = ({ target: { value } }) => dispatch({ type: CHANGE_NAME, payload: value, id });\r\n\r\n   const { value: { hours, minutes, seconds }, name } = state.counters.data[id];\r\n\r\n   return (\r\n      <div style={{ border: '1px solid' }} className='d-flex flex-column position-relative pt-4 pb-4 bg-dark'>\r\n         <div className='position-absolute text-danger'\r\n              style={{ top: '-5px', right: '5px', fontSize: '20px', cursor: 'pointer' }}\r\n              onClick={ onDeleteClick }>\r\n            &times;\r\n         </div>\r\n         <input className='mb-3 mt-3 align-self-center text-white bg-dark' style={{ maxWidth: '60%' }} value={name} onChange={onNameChange} />\r\n         <div className='mb-5 justify-content-around d-flex'>\r\n            <div className='text-white' key='hours'>\r\n               { hours } :\r\n            </div>\r\n            <div className='text-white' key='minutes'>\r\n               { minutes } :\r\n            </div>\r\n            <div className='text-white' key='seconds'>\r\n               { seconds }\r\n            </div>\r\n         </div>\r\n         <div className='justify-content-around d-flex'>\r\n            <div>\r\n               <Button color='success' onClick={onPausePlayClick}>\r\n                  { isPlaying() ? 'Пауза' : seconds === 0 ? 'Старт' : 'Продолжить' }\r\n               </Button>\r\n            </div>\r\n            <div>\r\n               <Button color='success' onClick={onStopClick}>Стоп</Button>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n};\r\n\r\nexport default Counter;\r\n","import { useContext } from 'react';\r\nimport { Col, Row, Table } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { DELETE_FROM_TABLE } from \"../Actions\";\r\n\r\nconst OldCounters = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const onDeleteClick = (id) => dispatch({ type: DELETE_FROM_TABLE, id });\r\n\r\n   if (!state.oldCounters.ids.length) {\r\n      return <></>\r\n   }\r\n\r\n   return (\r\n      <Row md='2'>\r\n         <Col className='mb-5'>\r\n            <Table dark>\r\n         <thead>\r\n            <tr>\r\n               <td>Дата</td>\r\n               <td>Имя</td>\r\n               <td>Время</td>\r\n               <td></td>\r\n            </tr>\r\n         </thead>\r\n         <tbody>\r\n            { state.oldCounters.ids.map(id => {\r\n               const { name, value: { seconds, minutes, hours } } = state.oldCounters.data[id];\r\n\r\n               return (\r\n                     <tr key={id}>\r\n                        <td>{ new Date(id).toDateString() }</td>\r\n                        <td>{ name }</td>\r\n                        <td>{ hours } : { minutes } : { seconds }</td>\r\n                        <td onClick={() => onDeleteClick(id)}>&times;</td>\r\n                     </tr>\r\n                  )\r\n            }) }\r\n         </tbody>\r\n      </Table>\r\n         </Col>\r\n      </Row>\r\n   )\r\n};\r\n\r\nexport default OldCounters;\r\n","import { useContext } from 'react';\r\nimport {AppContext} from \"../Contexts/AppContext\";\r\nimport {Button, Container, Row} from \"reactstrap\";\r\nimport {CREATE_COUNTER} from \"../Actions\";\r\n\r\nexport const CreateCounter = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const createCounter = () => dispatch({ type: CREATE_COUNTER });\r\n\r\n   return (\r\n      <Row>\r\n         <Button onClick={ createCounter }>{ state.counters.ids.length ? 'Ещё счётчик' : 'Создать счётчик' }</Button>\r\n      </Row>\r\n   )\r\n}\r\n","import * as actions from './../Actions';\r\nimport { getNewTime, counterInitialValue, counterStates } from \"../Utils\";\r\n\r\nexport const rootReducer = (state, action) => {\r\n   let newState;\r\n\r\n   switch (action.type) {\r\n      case actions.STOP:\r\n         if (state.counters.data[action.id].state === counterStates.playing) {\r\n            clearInterval(action.intervalId);\r\n         }\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: counterStates.pause,\r\n                     value: counterInitialValue.value\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case actions.PLAY:\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: counterStates.playing,\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case actions.PAUSE:\r\n         clearInterval(action.intervalId);\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: counterStates.pause\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case actions.UPDATE_TIME:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     value: getNewTime(state.counters.data[action.id].value)\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState({\r\n            ...newState,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     state: counterStates.pause\r\n                  }\r\n               }\r\n            }\r\n         });\r\n\r\n         return newState;\r\n      case actions.CREATE_COUNTER:\r\n         const newId = new Date().getTime();\r\n         state.counters.ids.push(newId);\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [newId]: { ...counterInitialValue }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.DELETE_AND_MOVE_TO_TABLE:\r\n         const ids = state.counters.ids.filter(id => id !== action.id);\r\n         let oldCounter = {};\r\n         const counterData = (({ [action.id]: counter, ...rest }) => {\r\n            const { seconds = 0, minutes = 0, hours = 0 } = counter?.value;\r\n\r\n            if (seconds !== 0 || minutes !== 0 || hours !== 0) {\r\n               oldCounter = { ...counter };\r\n               state.oldCounters.ids.push(action.id);\r\n            }\r\n\r\n            return rest;\r\n         })(state.counters.data);\r\n\r\n         if (action.intervalId) {\r\n            clearInterval(action.intervalId);\r\n         }\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: {\r\n               ...state.oldCounters,\r\n               data: {\r\n                  ...state.oldCounters.data,\r\n                  [action.id]: oldCounter\r\n               }\r\n            },\r\n            counters: { ids, data: counterData }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.CHANGE_NAME:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     name: action.payload\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case actions.DELETE_FROM_TABLE:\r\n         const data = (({ [action.id]:_, ...rest }) => rest)(state.oldCounters.data);\r\n         const newIds = state.oldCounters.ids.filter(id => action.id !== id);\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: { ids: newIds, data }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      default:\r\n         return { ...state };\r\n   }\r\n}\r\n","import { useReducer } from 'react';\r\nimport Counter from \"./Counter\";\r\nimport OldCounters from \"./OldCounters\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { CreateCounter } from './CreateCounter';\r\nimport { rootReducer } from '../Reducers/RootReducer';\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { useLocalStorage } from \"../Hooks/useLocalStorage\";\r\n\r\nconst initialState = {\r\n   counters: {\r\n      ids: [],\r\n      data: {}\r\n   },\r\n   oldCounters: {\r\n      ids: [],\r\n      data: []\r\n   }\r\n};\r\n\r\nconst App = () => {\r\n   const [storageState, setStorageState] = useLocalStorage({ keys: ['counters', 'oldCounters'] });\r\n   const isStorageExists = Object.keys(storageState).every(k => Boolean(storageState[k]));\r\n   const [state, dispatch] = useReducer(rootReducer, isStorageExists ? storageState : initialState, (state) => state);\r\n   const customDispatch = (data) => dispatch({ ...data, setStorageState });\r\n\r\n   return (\r\n      <AppContext.Provider value={[state, customDispatch]}>\r\n         <Container fluid className='bg-primary p-5' style={{ height: '100vh' }}>\r\n            <OldCounters key='oldCounters' />\r\n            <Row key='counters' className='mb-4'>\r\n               { state.counters.ids.map((id) => (\r\n                  <Col md={3} key={id} className='mb-4'>\r\n                     <Counter id={id} />\r\n                  </Col>\r\n               )) }\r\n            </Row>\r\n            <CreateCounter key='createCounter'/>\r\n         </Container>\r\n      </AppContext.Provider>\r\n   )\r\n};\r\n\r\nexport default App;\r\n","import { useState } from 'react';\r\n\r\nexport const useLocalStorage = ({ keys, initialState = {} }) => {\r\n   const commonState = {};\r\n   const initialKeys = Object.keys(initialState);\r\n\r\n   initialKeys.forEach(k => {\r\n      localStorage.setItem(k, initialKeys[k]);\r\n   });\r\n   keys.forEach(k => commonState[k] = JSON.parse(localStorage.getItem(k)));\r\n\r\n   const [state, setState] = useState(commonState);\r\n\r\n   const storageSetState = (newState) => {\r\n      let resultState;\r\n\r\n      if (typeof newState === 'function') {\r\n         resultState = { ...state, ...newState(state) };\r\n      } else if (typeof newState === 'object') {\r\n         resultState = { ...state, ...newState };\r\n      } else {\r\n         resultState = { [keys[0]]: newState };\r\n      }\r\n\r\n      keys.forEach(k => localStorage.setItem(k, JSON.stringify(resultState[k])));\r\n      setState(resultState);\r\n   };\r\n\r\n   return [state, storageSetState];\r\n}\r\n","import * as React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./Components/App\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}