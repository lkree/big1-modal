{"version":3,"sources":["Utils.ts","Actions.ts","Contexts/AppContext.ts","Components/OldCounterItem.tsx","Components/OldCounterFolder.tsx","Components/OldCounters.tsx","Components/CreateCounter.tsx","Reducers/RootReducer.ts","Components/Modes.tsx","Components/inputHelper.tsx","Components/Counter.tsx","Components/Counters.tsx","Components/App.tsx","Hooks/useLocalStorage.ts","index.tsx"],"names":["CounterStates","Modes","counterInitialValue","name","state","Pause","renderValue","seconds","minutes","hours","savedTime","startTime","intervalId","Actions","initialState","counters","ids","data","oldCounters","mode","Multi","usedNames","getTSFromValue","getValueFromTS","ts","Math","floor","getModifiedTS","value","timeType","payload","AppContext","createContext","OldCounterItem","useContext","dispatch","id","className","type","title","style","background","border","textOverflow","onBlur","target","ADD_TO_USED_NAMES","onChange","evt","CHANGE_NAME_FROM_DELETED","onChangeName","onClick","RESTORE_FROM_TABLE","onRestoreClick","DELETE_FROM_TABLE","onDeleteClick","OldCounterFolder","useState","isOpen","setIsOpen","stopPropagation","Collapse","Object","keys","map","k","isNode","OldCounters","result","forEach","date","Date","month","String","toLocaleString","dateCreated","getDate","length","Row","Col","CreateCounter","Button","CREATE_COUNTER","rootReducer","action","newState","STOP","Playing","clearInterval","PLAY","Single","countersData","PAUSE","UPDATE_TIME","currentTS","newTS","getNewTime","setStorageState","SET_INTERVAL_ID","newId","getTime","push","DELETE_AND_MOVE_TO_TABLE","filter","oldCounter","counterData","counter","rest","CHANGE_NAME_FROM_EXIST","newIds","CHANGE_MODE","oldIds","newCounter","oldCountersData","trim","toLowerCase","every","w","indexOf","includes","DELETE_FROM_USED_NAMES","n","CHANGE_TIME","position","top","right","Dropdown","toggle","DropdownToggle","caret","DropdownMenu","container","DropdownItem","ModeTypes","InputHelper","currentInput","onDelete","zIndex","Counter","inputRef","useRef","helperValue","setHelperValue","isHelperVisible","setIsHelperVisible","isEdit","setIsEdit","isPlaying","Boolean","onTimeChange","fontSize","cursor","maxWidth","readOnly","ref","setTimeout","onFocus","currentName","current","focus","color","setInterval","flexBasis","Counters","md","App","commonState","localStorage","setItem","JSON","stringify","record","parse","getItem","undefined","setState","resultState","useLocalStorage","storageState","useReducer","Provider","Container","fluid","minHeight","padding","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.b3271cef.chunk.js","sourcesContent":["import { Actions } from './Actions';\r\n\r\nexport enum CounterStates { Playing, Pause }\r\n\r\nexport const counterInitialValue: ICounterItem = {\r\n   name: 'без имени',\r\n   state: CounterStates.Pause,\r\n   renderValue: {\r\n      seconds: 0,\r\n      minutes: 0,\r\n      hours: 0\r\n   },\r\n   savedTime: 0,\r\n   startTime: null,\r\n   intervalId: null\r\n};\r\n\r\nexport enum Modes { Single = 'single', Multi = 'multi' }\r\n\r\nexport const initialState: IState = {\r\n   counters: {\r\n      ids: [],\r\n      data: {}\r\n   },\r\n   oldCounters: {\r\n      ids: [],\r\n      data: {}\r\n   },\r\n   mode: Modes.Multi,\r\n   usedNames: []\r\n\r\n};\r\n\r\nexport const getNewTime = ({ startTime, savedTime }: ICounterItem) => {\r\n   const currentTS = +new Date();\r\n   const newTS = Math.floor((currentTS - startTime) / 1000) + savedTime;\r\n\r\n   return getValueFromTS(newTS);\r\n}\r\n\r\nexport const getTSFromValue = ({ seconds, minutes, hours }: ICounterValue) => {\r\n   return seconds + (minutes * 60) + (hours * 3600);\r\n}\r\n\r\nexport const getValueFromTS = (ts: number): ICounterValue => ({\r\n   minutes: Math.floor(ts / 60 % 60),\r\n   hours: Math.floor(ts / 3600),\r\n   seconds: ts % 60\r\n});\r\n\r\nexport const getModifiedTS = (value: ICounterValue, timeType: keyof ICounterValue, payload: number): number => (\r\n   getTSFromValue({\r\n      ...value,\r\n      [timeType]: payload\r\n   })\r\n);\r\n\r\nexport type CounterTypes = 'counters' | 'oldCounters';\r\n\r\nexport interface ICounterValue {\r\n   hours: number,\r\n   minutes: number,\r\n   seconds: number\r\n}\r\n\r\nexport interface ICounterItem {\r\n   renderValue: ICounterValue;\r\n   savedTime: number;\r\n   state: CounterStates;\r\n   startTime?: number;\r\n   intervalId: NodeJS.Timeout | null;\r\n   name: string;\r\n}\r\n\r\nexport type IState = {\r\n   [K in CounterTypes]: {\r\n      ids: string[],\r\n      data: {\r\n         [key: string]: ICounterItem\r\n      }\r\n   }\r\n} & { mode: Modes, usedNames: string[] }\r\n\r\nexport interface IAction {\r\n   setStorageState: Function;\r\n   id?: string;\r\n   type?: Actions;\r\n   payload?: string;\r\n   intervalId?: NodeJS.Timeout;\r\n   timeType?: 'hours' | 'minutes' | 'seconds';\r\n   mode?: Modes;\r\n   startTime?: number;\r\n}\r\n\r\nexport type Node = { isNode: boolean; id?: string } & ICounterItem;\r\nexport type NodesRecord = Record<string, Node>;\r\nexport interface IOM { [K: string]: Node | NodesRecord | IOM; }\r\n","export enum Actions {\r\n   STOP = 'stop',\r\n   PLAY = 'play',\r\n   PAUSE = 'pause',\r\n   UPDATE_TIME = 'updateTime',\r\n   CREATE_COUNTER = 'createCounter',\r\n   SET_INTERVAL_ID = 'setIntervalId',\r\n   DELETE_AND_MOVE_TO_TABLE = 'deleteAndMoveToTable',\r\n   CHANGE_NAME_FROM_EXIST = 'changeNameFromExist',\r\n   CHANGE_NAME_FROM_DELETED = 'changeNameFromDeleted',\r\n   DELETE_FROM_TABLE = 'deleteFromTable',\r\n   CHANGE_MODE = 'changeMode',\r\n   RESTORE_FROM_TABLE = 'restoreFromTable',\r\n   ADD_TO_USED_NAMES = 'addToUsedNames',\r\n   DELETE_FROM_USED_NAMES = 'deleteFromUsedNames',\r\n   CHANGE_TIME = 'changeTime'\r\n}\r\n","import { createContext } from 'react';\r\nimport { IAction, initialState } from \"../Utils\";\r\n\r\nexport const AppContext = createContext([initialState, (data: Partial<IAction>) => {}] as const);\r\n","import { AppContext } from \"../Contexts/AppContext\";\r\nimport { Actions } from \"../Actions\";\r\nimport { useContext } from \"react\";\r\nimport { Node } from \"../Utils\";\r\n\r\nimport './_oldCounterItem.css';\r\n\r\ninterface IOptions {\r\n    data: Node;\r\n}\r\n\r\nexport const OldCounterItem = ({ data }: IOptions) => {\r\n    const [, dispatch] = useContext(AppContext);\r\n    const { id, name, renderValue: { hours, minutes, seconds } } = data;\r\n\r\n    const onDeleteClick = (id: string) => dispatch({ type: Actions.DELETE_FROM_TABLE, id });\r\n    const onRestoreClick = (id: string) => dispatch({ type: Actions.RESTORE_FROM_TABLE, id });\r\n    const onChangeName = ({ target: { value } } : { target: HTMLInputElement }, id: string) => (\r\n        dispatch({ type: Actions.CHANGE_NAME_FROM_DELETED, id, payload: value })\r\n    );\r\n    const onBlur = ({ target: { value } }: { target: HTMLInputElement }) => (\r\n        dispatch({ type: Actions.ADD_TO_USED_NAMES, payload: value })\r\n    );\r\n\r\n    return (\r\n        <div className='oldCounterItem d-flex p-3 border-bottom align-items-center'>\r\n            <p className='oldCounterItem__item text-white'>\r\n                <input type='text'\r\n                       className='w-100 text-white'\r\n                       title={ name }\r\n                       value={ name }\r\n                       style={{ background: 'transparent', border: 'none', textOverflow: 'ellipsis' }}\r\n                       onBlur={ onBlur }\r\n                       onChange={(evt) => onChangeName(evt, id)}\r\n                 />\r\n            </p>\r\n            <p className='oldCounterItem__item oldCounterItem__item--time text-white'>{ hours } : { minutes } : { seconds }</p>\r\n            <p className='oldCounterItem__item oldCounterItem__item--action' onClick={() => onRestoreClick(id)}>&#9874;</p>\r\n            <p className='oldCounterItem__item oldCounterItem__item--action text-danger' onClick={() => onDeleteClick(id)}>&times;</p>\r\n        </div>\r\n    );\r\n};\r\n","import { OldCounterItem } from \"./OldCounterItem\";\r\nimport { NodesRecord, Node, IOM } from \"../Utils\";\r\nimport { SyntheticEvent, useState } from 'react';\r\nimport { Collapse } from 'reactstrap';\r\n\r\ninterface IOptions {\r\n    name: keyof IOM;\r\n    data: IOM | NodesRecord;\r\n}\r\n\r\nexport const OldCounterFolder = ({ name, data }: IOptions) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const onClick = (evt: SyntheticEvent) => {\r\n        evt.stopPropagation();\r\n        setIsOpen(value => !value);\r\n    };\r\n\r\n    return (\r\n        <div key={ name } className='bg-dark pt-1 pb-1 pl-3 pr-3'>\r\n            <div className='text-white' onClick={ onClick }>{ name }</div>\r\n\r\n            <Collapse isOpen={ isOpen }>\r\n                { Object.keys(data).map(k => (\r\n                    data[k].isNode\r\n                        ? <OldCounterItem data={ data[k] as Node } key={ k } />\r\n                        : <OldCounterFolder data={ data[k] as IOM } name={ k } key={ k } />\r\n                )) }\r\n            </Collapse>\r\n        </div>\r\n    );\r\n}\r\n","import { AppContext } from \"../Contexts/AppContext\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { useContext } from 'react';\r\nimport { IOM, NodesRecord } from \"../Utils\";\r\nimport { OldCounterFolder } from \"./OldCounterFolder\";\r\n\r\nexport const OldCounters = () => {\r\n   const [state] = useContext(AppContext);\r\n   const result = {} as IOM;\r\n\r\n   const createStructure = () => {\r\n      state.oldCounters.ids.forEach(id => {\r\n         const date = new Date(+id);\r\n         const month = String(date.toLocaleString('default', { month: 'long' }));\r\n         const dateCreated = String(date.getDate());\r\n\r\n         if (!result[month]) {\r\n            result[month] = {};\r\n         }\r\n\r\n         if (!(result[month] as IOM)[dateCreated]) {\r\n            (result[month] as IOM)[dateCreated] = {};\r\n         }\r\n\r\n         ((result[month] as IOM)[dateCreated] as NodesRecord)[id] = {\r\n            ...state.oldCounters.data[id], id: id, isNode: true\r\n         };\r\n      });\r\n   }\r\n\r\n   createStructure();\r\n\r\n   if (!state.oldCounters.ids.length) {\r\n      return <></>\r\n   }\r\n\r\n   return (\r\n      <Row className='overflow-auto'>\r\n         <Col className='mb-5'>\r\n            { Object.keys(result).map(k => (\r\n               <OldCounterFolder data={ result[k] as IOM } name={ k } key={ k } />\r\n            )) }\r\n         </Col>\r\n      </Row>\r\n   )\r\n};\r\n","import { useContext } from 'react';\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Button, Row, Col } from \"reactstrap\";\r\nimport { Actions } from \"../Actions\";\r\n\r\nexport const CreateCounter = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const createCounter = () => dispatch({ type: Actions.CREATE_COUNTER });\r\n\r\n   return (\r\n      <Row>\r\n         <Col>\r\n            <Button onClick={ createCounter }>{ state.counters.ids.length ? 'Ещё счётчик' : 'Создать счётчик' }</Button>\r\n         </Col>\r\n      </Row>\r\n   )\r\n}\r\n","import {\r\n   getNewTime,\r\n   counterInitialValue,\r\n   CounterStates,\r\n   Modes,\r\n   IState,\r\n   IAction,\r\n   CounterTypes,\r\n   ICounterItem, getTSFromValue, getModifiedTS\r\n} from '../Utils';\r\nimport { Actions } from '../Actions';\r\n\r\nexport const rootReducer = (state: IState, action: IAction): IState => {\r\n   let newState: IState;\r\n\r\n   switch (action.type) {\r\n      case Actions.STOP:\r\n         if (state.counters.data[action.id].state === CounterStates.Playing) {\r\n            clearInterval(state.counters.data[action.id].intervalId);\r\n         }\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     startTime: null,\r\n                     state: CounterStates.Pause,\r\n                     renderValue: counterInitialValue.renderValue,\r\n                     savedTime: counterInitialValue.savedTime\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case Actions.PLAY:\r\n         if (state.mode === Modes.Single) {\r\n            const countersData = {} as IState[CounterTypes]['data'];\r\n\r\n            state.counters.ids.forEach(id => {\r\n               countersData[id] = {\r\n                  ...state.counters.data[id],\r\n                  state: CounterStates.Pause,\r\n                  startTime: null\r\n               }\r\n\r\n               if (countersData[id].intervalId !== null) {\r\n                  clearInterval(countersData[id].intervalId);\r\n                  countersData[id].intervalId = null;\r\n               }\r\n            });\r\n\r\n\r\n            return {\r\n               ...state,\r\n               counters: {\r\n                  ...state.counters,\r\n                  data: {\r\n                     ...countersData,\r\n                     [action.id]: {\r\n                        ...state.counters.data[action.id],\r\n                        state: CounterStates.Playing,\r\n                        startTime: action.startTime\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         } else {\r\n            return {\r\n               ...state,\r\n               counters: {\r\n                  ...state.counters,\r\n                  data: {\r\n                     ...state.counters.data,\r\n                     [action.id]: {\r\n                        ...state.counters.data[action.id],\r\n                        state: CounterStates.Playing,\r\n                        startTime: action.startTime\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case Actions.PAUSE:\r\n         clearInterval(state.counters.data[action.id].intervalId);\r\n\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     startTime: null,\r\n                     state: CounterStates.Pause,\r\n                     savedTime: getTSFromValue(state.counters.data[action.id].renderValue)\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      case Actions.UPDATE_TIME:\r\n         const renderValue = getNewTime(state.counters.data[action.id]);\r\n\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     renderValue\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState({\r\n            ...newState,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     renderValue,\r\n                     state: CounterStates.Pause,\r\n                     savedTime: getTSFromValue(state.counters.data[action.id].renderValue) + 1\r\n                  }\r\n               }\r\n            }\r\n         });\r\n\r\n         return newState;\r\n      case Actions.SET_INTERVAL_ID:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     intervalId: action.intervalId\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CREATE_COUNTER:\r\n         const newId = String(new Date().getTime());\r\n         state.counters.ids.push(newId);\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [newId]: { ...counterInitialValue }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.DELETE_AND_MOVE_TO_TABLE:\r\n         const ids = state.counters.ids.filter(id => id !== action.id);\r\n         let oldCounter = {} as ICounterItem;\r\n         const counterData = (({ [action.id]: counter, ...rest }) => {\r\n            const { seconds = 0, minutes = 0, hours = 0 } = counter?.renderValue;\r\n\r\n            if (seconds !== 0 || minutes !== 0 || hours !== 0) {\r\n               oldCounter = { ...counter };\r\n               state.oldCounters.ids.push(action.id);\r\n            }\r\n\r\n            return rest;\r\n         })(state.counters.data);\r\n\r\n         if (state.counters.data[action.id].intervalId) {\r\n            clearInterval(state.counters.data[action.id].intervalId);\r\n         }\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: {\r\n               ...state.oldCounters,\r\n               data: {\r\n                  ...state.oldCounters.data,\r\n                  [action.id]: oldCounter\r\n               }\r\n            },\r\n            counters: { ids, data: counterData }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CHANGE_NAME_FROM_EXIST:\r\n         newState = {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     name: action.payload\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CHANGE_NAME_FROM_DELETED:\r\n         newState = {\r\n            ...state,\r\n            oldCounters: {\r\n               ...state.oldCounters,\r\n               data: {\r\n                  ...state.oldCounters.data,\r\n                  [action.id]: {\r\n                     ...state.oldCounters.data[action.id],\r\n                     name: action.payload\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.DELETE_FROM_TABLE:\r\n         const data = (({ [action.id]:_, ...rest }) => rest)(state.oldCounters.data);\r\n         const newIds = state.oldCounters.ids.filter(id => action.id !== id);\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: { ids: newIds, data }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.CHANGE_MODE:\r\n         if (action.mode !== state.mode) {\r\n            newState = {\r\n               ...state,\r\n               mode: action.mode\r\n            }\r\n\r\n            action.setStorageState(newState);\r\n\r\n            return newState;\r\n         }\r\n\r\n         return { ...state };\r\n      case Actions.RESTORE_FROM_TABLE:\r\n         const oldIds = state.oldCounters.ids.filter(id => id !== action.id);\r\n         let newCounter = {} as ICounterItem;\r\n\r\n         const oldCountersData = (({ [action.id]: counter, ...rest }) => {\r\n            newCounter = { ...counter };\r\n            state.counters.ids.push(action.id);\r\n\r\n            return rest;\r\n         })(state.oldCounters.data);\r\n\r\n         newState = {\r\n            ...state,\r\n            oldCounters: { ids: oldIds, data: { ...oldCountersData } },\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: newCounter\r\n               }\r\n            }\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return newState;\r\n      case Actions.ADD_TO_USED_NAMES:\r\n         const payload = action.payload.trim().toLowerCase();\r\n\r\n         if (payload && state.usedNames.every(w => !~w.indexOf(payload))) {\r\n            newState = {\r\n               ...state,\r\n               ...(!state.usedNames.includes(payload) && { usedNames: [...state.usedNames, payload] })\r\n            };\r\n\r\n            action.setStorageState(newState);\r\n\r\n            return { ...newState };\r\n         } else {\r\n            return { ...state };\r\n         }\r\n      case Actions.DELETE_FROM_USED_NAMES:\r\n         newState = {\r\n            ...state,\r\n            usedNames: state.usedNames.filter(n => n !== action.payload)\r\n         };\r\n\r\n         action.setStorageState(newState);\r\n\r\n         return { ...newState };\r\n      case Actions.CHANGE_TIME:\r\n         return {\r\n            ...state,\r\n            counters: {\r\n               ...state.counters,\r\n               data: {\r\n                  ...state.counters.data,\r\n                  [action.id]: {\r\n                     ...state.counters.data[action.id],\r\n                     renderValue: {\r\n                        ...state.counters.data[action.id].renderValue,\r\n                        [action.timeType]: +action.payload\r\n                     },\r\n                     savedTime: getModifiedTS(\r\n                         state.counters.data[action.id].renderValue, action.timeType, +action.payload\r\n                     )\r\n                  }\r\n               }\r\n            }\r\n         };\r\n\r\n      default:\r\n         return { ...state };\r\n   }\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownMenu } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Modes as ModeTypes } from \"../Utils\";\r\nimport { Actions } from '../Actions';\r\n\r\nexport const Modes = () => {\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const [isOpen, setIsOpen] = useState(false);\r\n\r\n   return (\r\n      <div style={{ position: 'absolute', top: '10px', right: '15px' }}>\r\n         <Dropdown isOpen={ isOpen } toggle={ () => setIsOpen(value => !value) }>\r\n            <DropdownToggle caret>{ state.mode }</DropdownToggle>\r\n            <DropdownMenu container=\"body\">\r\n               <DropdownItem onClick={() => dispatch({ type: Actions.CHANGE_MODE, mode: ModeTypes.Single })}>\r\n                  { ModeTypes.Single }\r\n               </DropdownItem>\r\n               <DropdownItem onClick={() => dispatch({ type: Actions.CHANGE_MODE, mode: ModeTypes.Multi })}>\r\n                  { ModeTypes.Multi }\r\n               </DropdownItem>\r\n            </DropdownMenu>\r\n         </Dropdown>\r\n      </div>\r\n   )\r\n}\r\n","import { useContext } from 'react';\r\nimport { AppContext } from '../Contexts/AppContext';\r\n\r\nimport './_inputHelper.css';\r\n\r\ninterface IInputHelperOptions {\r\n    currentInput: string;\r\n    onClick: Function;\r\n    onDelete: Function;\r\n}\r\n\r\nexport const InputHelper = ({ currentInput, onClick, onDelete }: IInputHelperOptions) => {\r\n    const [state] = useContext(AppContext);\r\n\r\n    return (\r\n        <div className='inputHelper bg-white d-flex flex-column position-absolute' style={{ top: '70px', zIndex: 10 }}>\r\n            { state.usedNames\r\n                .filter(n => ~n.indexOf(currentInput.toLowerCase()) && currentInput !== n)\r\n                .map(n => (\r\n                    <div className='inputHelper__item' key={ n }>\r\n                        <p className='inputHelper__text' onClick={ (evt) => { evt.stopPropagation(); onClick(n) }}>{ n }</p>\r\n                        <div onClick={ evt => { evt.stopPropagation(); onDelete(n) }}\r\n                             className='inputHelper__item-delete text-danger'>\r\n                            &times;\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n};\r\n","import { useContext, useState, useRef } from 'react';\r\nimport {CounterStates, IAction} from \"../Utils\";\r\nimport { Button } from \"reactstrap\";\r\nimport { AppContext } from \"../Contexts/AppContext\";\r\nimport { Actions } from \"../Actions\";\r\nimport { InputHelper } from './inputHelper';\r\n\r\nexport const Counter = ({ id }: { id: string }) => {\r\n   const inputRef = useRef(null);\r\n   const [helperValue, setHelperValue] = useState('');\r\n   const [isHelperVisible, setIsHelperVisible] = useState(false);\r\n   const [state, dispatch] = useContext(AppContext);\r\n   const [isEdit, setIsEdit] = useState(false);\r\n   const isPlaying = () => state.counters.data[id].state === CounterStates.Playing;\r\n   const onPausePlayClick = () => {\r\n      if (isPlaying()) return dispatch({ type: Actions.PAUSE, id });\r\n\r\n      dispatch({ type: Actions.PLAY, id, startTime: +new Date() });\r\n      const intervalId = setInterval(() => dispatch({ type: Actions.UPDATE_TIME, id }), 1000);\r\n      dispatch({ type: Actions.SET_INTERVAL_ID, intervalId, id });\r\n   };\r\n   const onStopClick = () => dispatch({ type: Actions.STOP, id });\r\n   const onDeleteClick = () => dispatch({ type: Actions.DELETE_AND_MOVE_TO_TABLE, id });\r\n   const onInputHelperClick = (value: string) => {\r\n      onChange({ target: { value }});\r\n      inputRef.current.focus();\r\n   }\r\n   const onChange = ({ target: { value }}: { target: Partial<HTMLInputElement> }) => {\r\n      if (!isEdit) return;\r\n\r\n      setIsHelperVisible(Boolean(value));\r\n      setHelperValue(value);\r\n      dispatch({ type: Actions.CHANGE_NAME_FROM_EXIST, payload: value, id });\r\n   };\r\n   const onBlur = ({ target: { value } }: { target: HTMLInputElement }) => {\r\n      setTimeout(() => setIsHelperVisible(false), 300);\r\n      dispatch({ type: Actions.ADD_TO_USED_NAMES, payload: value });\r\n   };\r\n   const onDeleteOldName = (payload: string) => {\r\n      setTimeout(() => { inputRef.current.focus(); setIsHelperVisible(true) }, 300);\r\n      dispatch({ type: Actions.DELETE_FROM_USED_NAMES, payload });\r\n   }\r\n   const onFocus = (currentName: string) => {\r\n      if (!isEdit) return;\r\n\r\n      setIsHelperVisible(Boolean(currentName));\r\n      setHelperValue(currentName);\r\n   }\r\n   const onEditClick = () => setIsEdit(value => !value);\r\n   const onTimeChange = (payload: string, timeType: IAction['timeType']) => {\r\n      if (!isEdit) return;\r\n\r\n      dispatch({ type: Actions.CHANGE_TIME, payload, timeType, id });\r\n   };\r\n\r\n   const { renderValue: { hours, minutes, seconds }, name } = state.counters.data[id];\r\n\r\n   return (\r\n      <div style={{ border: '1px solid' }} className='d-flex flex-column position-relative pt-4 pb-4 bg-dark'>\r\n         <div className='position-absolute text-danger'\r\n              style={{ top: '-5px', right: '5px', fontSize: '20px', cursor: 'pointer' }}\r\n              onClick={ onDeleteClick }>\r\n            &times;\r\n         </div>\r\n         <div className='position-absolute text-danger'\r\n              style={{ top: '5px', right: '25px', fontSize: '10px', cursor: 'pointer' }}\r\n              onClick={ onEditClick }>\r\n            &#9998;\r\n         </div>\r\n         <input className='mb-3 mt-3 align-self-center text-white bg-dark'\r\n                style={{ maxWidth: '60%', border: 'transparent' }}\r\n                value={ name }\r\n                title={ name }\r\n                readOnly={ !isEdit }\r\n                ref={ inputRef }\r\n                onBlur={ onBlur }\r\n                onFocus={ () => onFocus(name) }\r\n                onChange={ onChange } />\r\n         { isHelperVisible && <InputHelper currentInput={ helperValue } onClick={ onInputHelperClick } onDelete={ onDeleteOldName } /> }\r\n         <div className='mb-5 justify-content-around d-flex text-white w-100'>\r\n            <input className='text-white d-flex text-center text-white bg-dark'\r\n                   style={{ border: 'none', maxWidth: '15%' }}\r\n                   value={ hours }\r\n                   onChange={ ({ target: { value } }) => onTimeChange(value, 'hours') }\r\n            />\r\n                :\r\n            <input className='text-white d-flex text-center text-white bg-dark'\r\n                   style={{ border: 'none', maxWidth: '15%' }}\r\n                   value={ minutes }\r\n                   onChange={ ({ target: { value } }) => onTimeChange(value, 'minutes') }\r\n            />\r\n                :\r\n            <input className='text-white d-flex text-center text-white bg-dark'\r\n                   style={{ border: 'none', maxWidth: '15%' }}\r\n                   value={ seconds }\r\n                   onChange={ ({ target: { value } }) => onTimeChange(value, 'seconds') }\r\n            />\r\n         </div>\r\n         <div className='justify-content-around d-flex'>\r\n            <Button color='success' onClick={ onPausePlayClick } style={{ flexBasis: '40%' }}>\r\n               { isPlaying() ? 'Пауза' : seconds === 0 ? 'Старт' : 'Продолжить' }\r\n            </Button>\r\n            { !isPlaying() && <Button color='success' style={{ flexBasis: '40%' }} onClick={ onStopClick }>Стоп</Button> }\r\n         </div>\r\n      </div>\r\n   )\r\n};\r\n","import { AppContext } from \"../Contexts/AppContext\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { Counter } from \"./Counter\";\r\nimport { useContext } from 'react';\r\n\r\nexport const Counters = () => {\r\n   const [state] = useContext(AppContext);\r\n\r\n   return (\r\n      <Row key='counters' className='mb-4'>\r\n         { state.counters.ids.map((id) => (\r\n            <Col md={4} key={id} className='mb-4'>\r\n               <Counter id={id} />\r\n            </Col>\r\n         )) }\r\n      </Row>\r\n   )\r\n}\r\n","import { useReducer } from 'react';\r\nimport { OldCounters } from \"./OldCounters\";\r\nimport { Container } from 'reactstrap';\r\nimport { CreateCounter } from './CreateCounter';\r\nimport { rootReducer } from '../Reducers/RootReducer';\r\nimport { AppContext } from '../Contexts/AppContext';\r\nimport { useLocalStorage } from '../Hooks/useLocalStorage';\r\nimport { IState, initialState, IAction } from '../Utils';\r\nimport { Modes } from './Modes';\r\nimport { Counters } from \"./Counters\";\r\n\r\nexport const App = () => {\r\n   const [storageState, setStorageState] = useLocalStorage({ keys: Object.keys(initialState) as Array<keyof IState> });\r\n   const [state, dispatch] = useReducer<typeof rootReducer>(rootReducer, { ...initialState, ...storageState });\r\n   const customDispatch = (data: Partial<IAction>) => dispatch({ ...data, setStorageState });\r\n\r\n   return (\r\n      <AppContext.Provider value={[state, customDispatch]}>\r\n         <Container fluid className='bg-primary' style={{ minHeight: '100vh', padding: '70px 3rem 20px' }}>\r\n            <Modes />\r\n            <OldCounters key='oldCounters' />\r\n            <Counters />\r\n            <CreateCounter key='createCounter'/>\r\n         </Container>\r\n      </AppContext.Provider>\r\n   )\r\n};\r\n","import { useState } from 'react';\r\nimport { IState } from '../Utils';\r\n\r\ntype UseLocalStorage = ({ keys, initialState }: { keys: Array<keyof IState>, initialState?: IState}) => [Partial<IState>, Function];\r\ntype ISetStorageProps = ((state: IState) => IState) | IState;\r\n\r\n\r\nexport const useLocalStorage: UseLocalStorage = ({ keys, initialState = {} }) => {\r\n   const commonState = {} as IState;\r\n   const initialKeys = Object.keys(initialState) as Array<keyof IState>;\r\n\r\n   initialKeys.forEach(k => localStorage.setItem(k, JSON.stringify(initialState[k])));\r\n\r\n   keys.forEach(k => {\r\n      const record = JSON.parse(localStorage.getItem(k) as string);\r\n\r\n      if (['counters', 'oldCounters'].includes(k)) {\r\n         record.ids.forEach((id: string) => {\r\n            if (record.data[id].value) {\r\n               record.data[id] = {\r\n                  ...record.data[id],\r\n                  renderValue: { ...record.data[id].value }\r\n               }\r\n\r\n               delete record.data[id].value;\r\n            }\r\n         });\r\n      }\r\n\r\n      if (record !== null && record !== undefined) {\r\n         commonState[k] = record;\r\n      }\r\n   });\r\n\r\n   const [state, setState] = useState(commonState);\r\n\r\n   const storageSetState = (newState: ISetStorageProps) => {\r\n      let resultState: IState;\r\n\r\n      if (typeof newState === 'function') {\r\n         resultState = { ...state, ...newState(state) };\r\n      } else {\r\n         resultState = { ...state, ...newState };\r\n      }\r\n\r\n      keys.forEach(k => localStorage.setItem(k, JSON.stringify(resultState[k])));\r\n      setState(resultState);\r\n   };\r\n\r\n   return [state, storageSetState];\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport { App } from \"./Components/App\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}