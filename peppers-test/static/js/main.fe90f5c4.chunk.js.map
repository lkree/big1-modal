{"version":3,"sources":["Components/City.js","Components/Photo.js","Components/Map.js","index.js","Components/App.js","Assets/img/Map.png"],"names":["CityMarker","styled","div","y","x","name","CityCore","City","rest","appeare","keyframes","PhotoWrapper","Img","img","Photo","src","coordinates","x1","y1","alt","Div","MapImg","Map","useState","currentCount","photosData","changePhotosData","calculateMinMax","min","max","Math","floor","random","getRandomArrayElement","array","length","useEffect","setInterval","maxPhotos","accesses","renderPhotosCount","zones","renderCount","w","prototype","_then","cb","args","getAvailablePhotos","photos","usedPhotos","randomPhoto","includes","getAvailableCoordinates","availableCoordinate","usedCoordinates","getCoordinates","x2","y2","picSize","isIntersection","_x1","_x2","_y1","_y2","coordinate","iterationsCount","every","curr","getRandomData","Array","fill","forEach","_","zoneName","names","tempData","map","photo","find","access","push","fillTheResult","result","Object","setPrototypeOf","assign","createNewPhotosData","cities","props","i","key","render","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.fe90f5c4.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst CityMarker = styled.div`\n  position: absolute;\n  top: ${({y}) => y}px;\n  left: ${({x}) => x}px;\n  width: 8px;\n  height: 8px;\n  background-color: yellow;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &::before {\n    content: '${({name}) => name}';\n    font-size: 14px;\n    background: #fff;\n    position: absolute;\n    top: -30px;\n    white-space: nowrap;\n    line-height: 21px;\n    padding: 0 10px;\n    opacity: 0;\n    transition: all 0.5s ease;\n  }\n  &::after {\n    content: '';\n    width: 0;\n    height: 0;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-top: 10px solid #fff;\n    position: absolute;\n    bottom: 10px;\n    left: calc(50% - 5px);\n    opacity: 0;\n    transition: all 0.5s ease;\n  }\n  &:hover {\n    cursor: pointer;\n      &::after {\n        opacity: 1;\n      }\n      &::before {\n        opacity: 1;\n      }\n  }\n`;\n\nconst CityCore = styled.div`\n  width: 30%;\n  height: 30%;\n  background: #fff;\n  border-radius: 50%;\n`;\n\nexport const City = ({name, ...rest}) => {\n  return (\n    <CityMarker name={name} {...rest}>\n      <CityCore/>\n    </CityMarker>\n  );\n};\n","import React from \"react\";\nimport styled, {keyframes} from \"styled-components\";\n\nconst appeare = keyframes`\n   0% {\n        display: none;\n        opacity: 0;\n    }\n\n    1% {\n        display: block;\n        opacity: 0;\n    }\n\n    100% {\n        display: block;\n        opacity: 1;\n    }\n`;\n\n\nconst PhotoWrapper = styled.div`\n  position: absolute;\n  animation: ${appeare} 1.5s ease infinite alternate;\n  top: ${({y}) => y}px;\n  left: ${({x}) => x}px;\n  width: 44px;\n  height: 44px;\n  box-shadow: 0 0 0 5px #fff;\n  &::after {\n    content: '';\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 12px solid #fff;\n    position: absolute;\n    bottom: -17px;\n    left: calc(50% - 10px);\n  }\n`;\n\nconst Img = styled.img`\n  max-width: 100%;\n`;\n\n\nexport const Photo = ({src, coordinates: {x1, y1}}) => {\n  return (\n    <PhotoWrapper x={x1} y={y1}>\n      <Img src={src} alt={''}/>\n    </PhotoWrapper>\n  )\n};\n","import React, {useState, useEffect} from \"react\";\nimport styled from \"styled-components\";\nimport MapImg from '../Assets/img/Map.png';\nimport cities from '../data/cities';\nimport {City} from \"./City\";\nimport {Photo} from \"./Photo\";\nimport zones from '../data/zones';\nimport accesses from  '../data/accesses';\n\nconst Div = styled.div`\n  background: url(${MapImg}) no-repeat center;\n  width: 841px;\n  height: 521px;\n`;\n\nexport const Map = () => {\n  const [photosData, changePhotosData] = useState({\n    currentCount: 0,\n    src: [],\n    coordinates: [],\n  });\n  const calculateMinMax = (min, max) => Math.floor(min + Math.random() * (max + 1 - min));\n  const getRandomArrayElement = (array) => array[calculateMinMax(0, array.length-1)];\n  const createNewPhotosData = (accesses, zones, renderCount) => {\n    const w = (() => {\n      const w = () => w;\n      w.prototype = {\n        /**\n         * Functor for initiate chaining\n         * @param cb {Function}\n         * @param args {*}\n         * @returns {Function}\n         */\n        _then: (cb = () => {}, ...args) => {cb(...args); return w.prototype},\n        getAvailablePhotos: (photos, usedPhotos = []) => {\n          let randomPhoto = getRandomArrayElement(photos);\n\n          while (usedPhotos.includes(randomPhoto))\n            randomPhoto = getRandomArrayElement(photos);\n\n          return randomPhoto;\n        },\n        /**\n         * @param availableCoordinate {Object}\n         * @param usedCoordinates {Array<Object>}\n         * @returns {{y1: number, x1: number, y2: number, x2: number}}\n         */\n        getAvailableCoordinates: (availableCoordinate, usedCoordinates = []) => {\n          /**\n           * @param x1 {Number}\n           * @param x2 {Number}\n           * @param y1 {Number}\n           * @param y2 {Number}\n           * @param picSize {Number}\n           */\n          const getCoordinates = ({x1, x2, y1, y2}, picSize = 60) => {\n            const x = calculateMinMax(+x1, +x2), y = calculateMinMax(+y1, +y2);\n            return {\n              x1: x,\n              x2: x + picSize,\n              y1: y,\n              y2: y + picSize,\n            };\n          };\n          const isIntersection = ({x1, x2, y1, y2}, {x1: _x1, x2: _x2, y1: _y1, y2: _y2}) => {\n            if (x1 > _x1 && x1 > _x2)\n              return false;\n            if (x1 < _x1 && x2 < _x1)\n              return false;\n            if (y1 > _y1 && y1 > _y2)\n              return false;\n            if (y1 < _y1 && y2 < _y1)\n              return false;\n\n            return true;\n          };\n\n          let coordinate = getCoordinates(availableCoordinate);\n          let iterationsCount = 0;\n\n          while (!usedCoordinates.every(curr => !isIntersection(coordinate, curr))) {\n            coordinate = getCoordinates(availableCoordinate);\n            ++iterationsCount;\n            if (iterationsCount > 100) return {x1: -100, x2: -100, y1: -100, y2: -100};\n          }\n\n          return coordinate;\n        },\n        getRandomData: () => {\n          new Array(renderCount)\n            .fill('')\n            .forEach(_ => {\n              const zoneName = getRandomArrayElement(w.names);\n              const usedPhotos = [...w.tempData.map(({photo}) => photo)];\n              const photo = w.getAvailablePhotos(zones.find(({name}) => zoneName === name).photos, usedPhotos);\n              const usedCoordinates = [...w.tempData.map(({coordinates}) => coordinates)];\n              const coordinates = w.getAvailableCoordinates(accesses[getRandomArrayElement(zones.find(({name}) => zoneName === name).access)], usedCoordinates);\n              w.tempData.push({\n                zoneName, photo, coordinates\n              });\n            });\n        },\n        fillTheResult: () => {\n          w.result = {\n            coordinates: w.tempData.map(({coordinates}) => coordinates),\n            src: w.tempData.map(({photo}) => photo),\n          };\n        },\n      };\n      Object.setPrototypeOf(w, w.prototype);\n\n      return Object.assign(w, {\n        tempData: [],\n        result: {},\n        names: zones.map(({name}) => name),\n      })();\n    })();\n    const {getRandomData, fillTheResult} = w;\n\n    w\n      ._then(getRandomData)\n      ._then(fillTheResult);\n\n    return {\n      currentCount: renderCount,\n      ...w.result\n    };\n  };\n  useEffect(() => {\n    setInterval(() => {\n      const {maxPhotos} = accesses;\n      const renderPhotosCount = calculateMinMax(1, maxPhotos);\n      changePhotosData(createNewPhotosData(accesses, zones, renderPhotosCount));\n    }, 3000)}, []);\n  const renderCities = () => (\n    cities.map((props, i) => <City key={i} {...props}/>)\n  );\n  const renderPhoto = () => photosData.src.map((src, i) => <Photo src={src} coordinates={photosData.coordinates[i]} key={i}/>);\n\n  return (\n    <Div>\n      {renderCities()}\n      {renderPhoto()}\n    </Div>\n  );\n};\n","import React from \"react\";\nimport {render} from 'react-dom';\nimport {App} from \"./Components/App\";\n\nrender(<App/>, document.querySelector('#root'));\n","import React from \"react\";\nimport {Map} from \"./Map\";\n\nexport const App = () => (\n  <Map/>\n);\n","module.exports = __webpack_public_path__ + \"static/media/Map.01fa5915.png\";"],"sourceRoot":""}