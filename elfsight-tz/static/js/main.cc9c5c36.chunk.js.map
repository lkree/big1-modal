{"version":3,"sources":["store/reducers/dataReducer/actions.ts","hooks/useTypedSelector.ts","store/reducers/dataReducer/reducer.ts","common/filters.ts","common/constants.ts","common/utils.ts","store/reducers/popupReducer/actions.ts","store/reducers/dataReducer/utils.ts","store/reducers/dataReducer/actionCreators.ts","store/reducers/popupReducer/reducer.ts","store/reducers/filterReducer/actions.ts","store/reducers/popupReducer/actionCreators.ts","store/reducers/filterReducer/utils.ts","store/reducers/filterReducer/reducer.ts","store/reducers/filterReducer/actionCreators.ts","store/reducers/index.ts","hooks/useActions.ts","selectors/dataSelector.ts","selectors/filterSelector.ts","selectors/popupSelector.ts","components/PaginationWrapper.tsx","components/SmallCard.tsx","components/PopupContainer.tsx","components/SelectFilter.tsx","components/InputFilter.tsx","components/FilterPanel.tsx","components/CardWrapper.tsx","components/Error.tsx","components/Header.tsx","components/App.tsx","store/index.ts","index.tsx"],"names":["Actions","useTypedSelector","useSelector","Filters","initialState","processInfo","isLoading","error","renderData","meta","CHARACTER_URL","getUrlWithPageNumber","url","pageNumber","match","replace","getUrlWithFilters","filters","filterNames","Object","keys","firstFilterName","value","slice","reduce","battery","filterName","FILTER_TYPES","Name","type","placeHolderText","Type","Species","Status","options","Gender","downloadData","resolve","reject","fetch","then","r","json","result","catch","getData","setData","setError","dispatch","a","payload","SetData","SetError","actionCreators","setIsLoading","SetIsLoading","getNextPage","pageType","prev","next","pages","isOpened","data","open","Open","close","Close","getHasChanges","state","some","k","Boolean","isFiltered","hasChanges","setFiltered","SetFiltered","setChanges","filterType","SetChanges","resetFilters","ResetFilters","reducers","dataState","popupState","filterState","dataReducer","action","results","info","popupReducer","filterReducer","newState","dataActionCreators","popupActionCreators","filterActionCreators","useActions","bindActionCreators","useDispatch","getDataState","characterData","getError","getFilterState","getPopupState","PaginationWrapper","getPage","useCallback","currentPage","split","length","getCurrentPageNumber","isFirstPage","isLastPage","Pagination","className","PaginationItem","disabled","PaginationLink","href","onClick","active","SmallCard","item","enableNameClick","onNameClick","id","src","image","alt","name","status","location","origin","PopupContainer","Modal","isOpen","toggle","size","ModalHeader","ModalBody","SelectFilter","selectorText","headerText","filterValues","onChange","useState","setIsOpen","onItemClick","toggleDropDown","InputGroup","InputGroupButtonDropdown","addonType","DropdownToggle","caret","DropdownMenu","DropdownItem","divider","header","map","InputFilter","labelText","onFilterChange","target","InputGroupAddon","InputGroupText","Input","placeholder","FilterPanel","isPanelOpen","setIsPanelOpen","onResetClick","onAcceptClick","onPanelIconClick","renderFilters","entries","filterValue","isIconFilled","Button","color","PanelIcon","rest","stroke","fill","strokeWidth","viewBox","height","ICON_SIZE","width","xmlns","d","fillRule","clipRule","CardWrapper","Spinner","style","ErrorContainer","children","Header","App","useEffect","Container","fluid","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.cc9c5c36.chunk.js","sourcesContent":["export enum Actions {\r\n    SetData = 'SetData',\r\n    SetError = 'SetError',\r\n    SetIsLoading = 'SetIsLoading'\r\n}\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { IState, TActions } from './interfaces';\r\nimport { Actions } from './actions';\r\n\r\n\r\nexport const initialState: IState = {\r\n    processInfo: { isLoading: false, error: null },\r\n    renderData: [],\r\n    meta: {} as IState['meta']\r\n}\r\n\r\nexport const dataReducer = (state: IState = initialState, action: TActions): IState => {\r\n    switch (action.type) {\r\n        case Actions.SetData:\r\n            if (!action.payload.results) {\r\n                return {\r\n                    ...state,\r\n                    renderData: [],\r\n                    meta: {} as IState['meta'],\r\n                    processInfo: { isLoading: false, error: 'К сожалению никто не нашёлся. Попробуй изменить параметры фильтрации.' }\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                renderData: action.payload.results,\r\n                meta: action.payload.info ?? {},\r\n                processInfo: { isLoading: false, error: null }\r\n            };\r\n        case Actions.SetError:\r\n            return {\r\n                ...state,\r\n                processInfo: { isLoading: false, error: action.payload }\r\n            }\r\n        case Actions.SetIsLoading:\r\n            return {\r\n                ...state,\r\n                processInfo: { isLoading: action.payload, error: null }\r\n            }\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n","export type TInputFilter = { type: 'input', placeHolderText: string };\r\nexport type TSelectFilter = { type: 'select', options: string[] };\r\n\r\nexport type IFilter = TInputFilter | TSelectFilter;\r\n\r\nexport enum Filters {\r\n    Name = 'name',\r\n    Status = 'status',\r\n    Species = 'species',\r\n    Gender = 'gender',\r\n    Type = 'type'\r\n}\r\n\r\nexport const FILTER_TYPES: Record<Filters, IFilter> = {\r\n    [Filters.Name]: {\r\n        type: 'input',\r\n        placeHolderText: 'как зовут?'\r\n    },\r\n    [Filters.Type]: {\r\n        type: 'input',\r\n        placeHolderText: 'какой тип?'\r\n    },\r\n    [Filters.Species]: {\r\n        type: 'input',\r\n        placeHolderText: 'какая раса?'\r\n    },\r\n    [Filters.Status]: {\r\n        type: 'select',\r\n        options: ['Alive', 'Dead', 'unknown']\r\n    },\r\n    [Filters.Gender]: {\r\n        type: 'select',\r\n        options: ['male', 'female', 'genderless', 'unknown']\r\n    }\r\n}\r\n","export const COMMON_URL = 'https://rickandmortyapi.com/api';\r\nexport const CHARACTER_URL = `${COMMON_URL}/character`;\r\n","import { ILoadMeta } from './interfaces';\r\nimport { Filters } from './filters';\r\nimport { CHARACTER_URL } from './constants';\r\n\r\nexport const getCurrentPageNumber = (meta: ILoadMeta): number => {\r\n    if (!meta.prev) return 1;\r\n    if (!meta.next) return meta.pages;\r\n\r\n    const result = meta.prev.split('page=');\r\n\r\n    return +result[result.length - 1].split('&')[0] + 1;\r\n}\r\n\r\nexport const getUrlWithPageNumber = (url: string, pageNumber: string | number) => {\r\n    if (url.match('page=')) {\r\n        return url.replace(/page=\\d+/, `page=${pageNumber}`);\r\n    } else if (url.match('\\\\?')) {\r\n        return `${url}&page=${pageNumber}`;\r\n    } else {\r\n        return `${url}?page=${pageNumber}`;\r\n    }\r\n};\r\n\r\nexport const getUrlWithFilters = (filters: Partial<Record<Filters, { value: string }>> = {}) => {\r\n    const filterNames = Object.keys(filters) as Filters[];\r\n    const firstFilterName = filterNames[0];\r\n\r\n    return `${CHARACTER_URL}?${firstFilterName}=${filters[firstFilterName]?.value}${\r\n        filterNames\r\n            .slice(1)\r\n            .reduce((battery, filterName: Filters) => {\r\n                battery += `&${filterName}=${filters[filterName]?.value}`;\r\n                return battery;\r\n            }, '')\r\n    }`;\r\n}\r\n","export enum Actions {\r\n    Open = 'Open',\r\n    Close = 'Close'\r\n}\r\n","import { CHARACTER_URL } from '../../../common';\r\nimport { IDownloadData } from './interfaces';\r\n\r\nexport const downloadData = ({ url = CHARACTER_URL, resolve, reject }: IDownloadData) =>\r\n    fetch(url)\r\n        .then((r) => r.json())\r\n        .then((result) => resolve(result))\r\n        .catch(() => reject('something goes wrong'));\r\n","import { IDownloadData, SetData, SetError, SetIsLoading, TPageType } from './interfaces';\r\nimport { CHARACTER_URL, getUrlWithPageNumber, ILoadMeta } from '../../../common';\r\nimport { AppDispatch } from '../../index';\r\nimport { downloadData } from './utils';\r\nimport { Actions } from './actions';\r\n\r\nconst getData = (\r\n    { url, resolve = setData, reject = setError }: Partial<IDownloadData> = { resolve: setData, reject: setError }\r\n) => async (dispatch: AppDispatch) => dispatch(await downloadData({ url, resolve, reject }));\r\n\r\nconst setIsLoading = (payload: SetIsLoading['payload']): SetIsLoading => ({ type: Actions.SetIsLoading, payload });\r\n\r\nconst setData = (payload: SetData['payload']): SetData  => ({ type: Actions.SetData, payload });\r\n\r\nconst getNextPage = (pageType: TPageType, meta: ILoadMeta) => {\r\n    switch (pageType) {\r\n        case 'first':\r\n            return getData({ url: getUrlWithPageNumber(meta.prev, 1) });\r\n        case 'next':\r\n            return getData({ url: meta.next });\r\n        case 'last':\r\n            return getData({ url: getUrlWithPageNumber(meta.next, meta.pages) });\r\n        case 'prev':\r\n            return getData({ url: meta.prev ?? CHARACTER_URL });\r\n    }\r\n};\r\n\r\nconst setError = (error: SetError['payload']): SetError => ({ type: Actions.SetError, payload: error });\r\n\r\nexport const actionCreators = { setIsLoading, setData, getNextPage, setError, getData };\r\n","import { IState, TActions } from './interfaces';\r\nimport { Actions } from './actions';\r\n\r\n\r\nexport const initialState: IState = {\r\n    isOpened: false,\r\n    data: {} as IState['data']\r\n}\r\n\r\nexport const popupReducer = (state: IState = initialState, action: TActions): IState => {\r\n    switch (action.type) {\r\n        case Actions.Close:\r\n            return initialState;\r\n        case Actions.Open:\r\n            return {\r\n                isOpened: true,\r\n                data: action.data\r\n            }\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n","export enum Actions {\r\n    SetFiltered = 'SetFiltered',\r\n    SetChanges = 'SetChanges',\r\n    ResetFilters = 'ResetFilters'\r\n}\r\n","import { Open, Close } from './interfaces';\r\nimport { Actions } from './actions';\r\n\r\nexport const actionCreators = {\r\n    open: (data: Open['data']): Open => ({ type: Actions.Open, data }),\r\n    close: (): Close  => ({ type: Actions.Close }),\r\n}\r\n","import { IState } from './interfaces';\r\nimport { Filters } from '../../../common';\r\n\r\nexport const getHasChanges = (state: IState) =>\r\n    Object.keys(state.filters ?? []).some((k) => Boolean(state.filters?.[k as Filters]?.value));\r\n","import { IState, TActions } from './interfaces';\r\nimport { Actions } from './actions';\r\nimport { getHasChanges } from './utils';\r\n\r\n\r\nexport const initialState: IState = {\r\n    isFiltered: false,\r\n    hasChanges: false,\r\n    filters: {} as IState['filters']\r\n}\r\n\r\nexport const filterReducer = (state: IState = initialState, action: TActions): IState => {\r\n    switch (action.type) {\r\n        case Actions.ResetFilters:\r\n        return {\r\n            ...state,\r\n            hasChanges: false,\r\n            isFiltered: false,\r\n            filters: {}\r\n        }\r\n        case Actions.SetFiltered:\r\n            return {\r\n                ...state,\r\n                isFiltered: action.payload\r\n            }\r\n        case Actions.SetChanges:\r\n            const newState = {\r\n                ...state,\r\n                filters: {\r\n                    ...state.filters,\r\n                    [action.filterType]: {\r\n                        value: action.payload\r\n                    }\r\n                }\r\n            };\r\n\r\n            newState.hasChanges = getHasChanges(newState);\r\n\r\n            return newState;\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n","import { SetFiltered, SetChanges, ResetFilters } from './interfaces';\r\nimport { Filters } from '../../../common';\r\nimport { Actions } from './actions';\r\n\r\ninterface ISetChangesProps {\r\n    payload: string;\r\n    filterType: Filters;\r\n}\r\n\r\nexport const actionCreators = {\r\n    setFiltered: (payload: boolean): SetFiltered => ({ type: Actions.SetFiltered, payload }),\r\n    setChanges: ({ payload, filterType }: ISetChangesProps): SetChanges => ({ type: Actions.SetChanges, payload, filterType }),\r\n    resetFilters: (): ResetFilters => ({ type: Actions.ResetFilters })\r\n}\r\n","import {\r\n    dataReducer, actionCreators as dataActionCreators, initialState as dataState, IState as IDataState, TActions as DataActions\r\n} from './dataReducer';\r\nimport {\r\n    popupReducer, actionCreators as popupActionCreators, initialState as popupState, IState as IPopupState, TActions as PopupActions\r\n} from './popupReducer';\r\nimport {\r\n    filterReducer, actionCreators as filterActionCreators, initialState as filterState, IState as IFilterState, TActions as FilterActions\r\n} from './filterReducer';\r\n\r\nexport const initialState = {\r\n    ...dataState,\r\n    ...popupState,\r\n    ...filterState\r\n}\r\n\r\nexport const reducers = {\r\n    dataReducer,\r\n    popupReducer,\r\n    filterReducer\r\n}\r\n\r\nexport const actionCreators = {\r\n    ...dataActionCreators,\r\n    ...popupActionCreators,\r\n    ...filterActionCreators\r\n}\r\n\r\nexport interface IState extends IDataState, IPopupState, IFilterState {}\r\nexport type TActions = DataActions & PopupActions & FilterActions;\r\n\r\nexport type { TPageType } from './dataReducer';\r\n","import { actionCreators } from '../store/reducers';\r\nimport { bindActionCreators } from 'redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AppDispatch } from '../store';\r\n\r\nexport const useActions = () => bindActionCreators(actionCreators, useDispatch<AppDispatch>());\r\n","import { RootState } from '../store';\r\n\r\nexport const getDataState = ({ dataReducer: { characterData, renderData, meta, processInfo } }: RootState) => ({\r\n    characterData,\r\n    renderData,\r\n    processInfo,\r\n    meta\r\n})\r\n\r\nexport const getError = ({ dataReducer: { processInfo: { error } } }: RootState) => error;\r\n","import { RootState } from '../store';\r\n\r\nexport const getFilterState = ({ filterReducer: { filters, isFiltered, hasChanges } }: RootState) => ({\r\n    filters,\r\n    isFiltered,\r\n    hasChanges\r\n})\r\n","import { RootState } from '../store';\r\n\r\nexport const getPopupState = ({ popupReducer: { isOpened, data } }: RootState) => ({ isOpened, data });\r\n","import { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\r\nimport { useActions, useTypedSelector } from '../hooks';\r\nimport { getCurrentPageNumber } from '../common';\r\nimport { TPageType } from '../store/reducers';\r\nimport { getDataState } from '../selectors';\r\nimport { FC, useCallback } from 'react';\r\n\r\nexport const PaginationWrapper: FC = () => {\r\n    const { processInfo, meta } = useTypedSelector(getDataState);\r\n    const { getNextPage, setIsLoading } = useActions();\r\n    const getPage = useCallback((pageType: TPageType) => {\r\n        setIsLoading(true);\r\n        getNextPage(pageType, meta);\r\n    }, [meta, getNextPage, setIsLoading]);\r\n\r\n    if (processInfo.isLoading || meta?.pages < 2) {\r\n        return <></>;\r\n    }\r\n\r\n    const currentPage = getCurrentPageNumber(meta);\r\n    const isFirstPage = currentPage === 1;\r\n    const isLastPage = currentPage === meta.pages;\r\n\r\n    return (\r\n        <Pagination className='pt-2'>\r\n            <PaginationItem disabled={ isFirstPage }>\r\n                <PaginationLink href='#'\r\n                                onClick={ () => getPage('first') }>{ '<<' }</PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem disabled={ isFirstPage }>\r\n                <PaginationLink href='#'\r\n                                onClick={ () => getPage('prev') }>{ '<' }</PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem active>\r\n                <PaginationLink>{ currentPage }</PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem disabled={ isLastPage }>\r\n                <PaginationLink href='#'\r\n                                onClick={ () => getPage('next') }>{ '>' }</PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem disabled={ isLastPage }>\r\n                <PaginationLink href='#'\r\n                                onClick={ () => getPage('last') }>{ '>>' }</PaginationLink>\r\n            </PaginationItem>\r\n        </Pagination>\r\n    )\r\n};\r\n","import { CHARACTER_URL, ICharacter } from '../common';\r\nimport { FC, useCallback } from 'react';\r\nimport { useActions } from '../hooks';\r\n\r\nimport './SmallCard.sass';\r\n\r\ninterface IOptions {\r\n    item?: ICharacter;\r\n    enableNameClick?: boolean;\r\n}\r\n\r\nexport const SmallCard: FC<IOptions> = ({ item, enableNameClick = true }: IOptions) => {\r\n    const { open, getData } = useActions();\r\n\r\n    // здесь просто сделал загрузку, потому что могу\r\n    // а вообще, конечно, можно было использовать item, который у нас и так есть\r\n    const onNameClick = useCallback((id: number) => {\r\n        getData({ url: `${CHARACTER_URL}/${id}`, resolve: open });\r\n    }, [getData, open]);\r\n\r\n    return (\r\n            <article className='RIMO__smallCard d-flex rounded'>\r\n                <div className='RIMO__smallCard-photo-wrapper w-100'>\r\n                    <img className='RIMO__smallCard-photo w-100 h-100'\r\n                         src={ item?.image }\r\n                         alt={ item?.type } />\r\n                </div>\r\n                <div className='RIMO__smallCard-info position-relative text-white d-flex flex-column'>\r\n                    <section className='RIMO__smallCard-content-wrapper d-flex flex-column'>\r\n                        <p className='RIMO__smallCard-name'\r\n                           onClick={ () => enableNameClick ? onNameClick(item!.id) : () => void 0 }>{ item?.name }</p>\r\n                        <span className='RIMO__smallCard-status d-flex align-items-center text-capitalize'>\r\n                            <span className={ 'RIMO__smallCard-status-icon RIMO__smallCard-status-icon--' + item?.status }></span>\r\n                            { item?.status }\r\n                        </span>\r\n                    </section>\r\n                    <section className='RIMO__smallCard-content-wrapper d-flex flex-column'>\r\n                        <span className='RIMO__smallCard-location-info-wrapper'>Last known location:</span>\r\n                        <p className='RIMO__smallCard-location-info'>{ item?.location.name }</p>\r\n                    </section>\r\n                    <section className='RIMO__smallCard-content-wrapper d-flex flex-column'>\r\n                        <span className='RIMO__smallCard-firstSeries-info'>First seen in:</span>\r\n                        <p className='RIMO__smallCard-firstSeries'>{ item?.origin?.name }</p>\r\n                    </section>\r\n                </div>\r\n            </article>\r\n    );\r\n};\r\n","import { Modal, ModalBody, ModalHeader } from 'reactstrap';\r\nimport { useActions, useTypedSelector } from '../hooks';\r\nimport { getPopupState } from '../selectors';\r\nimport { SmallCard } from './SmallCard';\r\nimport { FC } from 'react';\r\n\r\nexport const PopupContainer: FC = () => {\r\n    const { isOpened, data } = useTypedSelector(getPopupState);\r\n    const { close } = useActions();\r\n\r\n    return (\r\n        <Modal isOpen={ isOpened } toggle={ close } size='lg'>\r\n            <ModalHeader toggle={ close }>Character</ModalHeader>\r\n            <ModalBody>{ isOpened ? <SmallCard item={ data } enableNameClick={ false } /> : <></> }</ModalBody>\r\n        </Modal>\r\n    );\r\n}\r\n","import { DropdownItem, DropdownMenu, DropdownToggle, InputGroup, InputGroupButtonDropdown } from 'reactstrap';\r\nimport { Filters, TSelectFilter } from '../common';\r\nimport { FC, useCallback, useState } from 'react';\r\nimport { getFilterState } from '../selectors';\r\nimport { useTypedSelector } from '../hooks';\r\n\r\ninterface IOptions {\r\n    selectorText: string;\r\n    headerText?: string;\r\n    filterType: Filters;\r\n    filterValues: TSelectFilter;\r\n    onChange?: (value: string, filterType: Filters) => any;\r\n}\r\n\r\nexport const SelectFilter: FC<IOptions> = ({ selectorText, headerText, filterValues, filterType, onChange }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const { filters } = useTypedSelector(getFilterState);\r\n    const onItemClick = useCallback((value, filterType) => onChange?.(value, filterType), [onChange]);\r\n    const toggleDropDown = useCallback(() => setIsOpen(state => !state), [setIsOpen]);\r\n\r\n    return (\r\n        <InputGroup className='p-2'>\r\n            <InputGroupButtonDropdown addonType='prepend' isOpen={ isOpen } toggle={ toggleDropDown }>\r\n                <DropdownToggle caret>{ selectorText }</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={ () => onItemClick('', filterType) }>сбросить</DropdownItem>\r\n                    <DropdownItem divider />\r\n                    {\r\n                        headerText &&\r\n                        <>\r\n                           <DropdownItem header>{ headerText }</DropdownItem>\r\n                           <DropdownItem divider />\r\n                        </>\r\n                    }\r\n\r\n                    {\r\n                        filterValues.options.map((value) => (\r\n                            <DropdownItem key={ value }\r\n                                          disabled={ value === filters?.[filterType]?.value }\r\n                                          onClick={ () => onItemClick(value, filterType) }>\r\n                                { value }\r\n                            </DropdownItem>\r\n                        ))\r\n                    }\r\n                </DropdownMenu>\r\n            </InputGroupButtonDropdown>\r\n        </InputGroup>\r\n    )\r\n}\r\n","import { Input, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\r\nimport { ChangeEvent, FC, useCallback } from 'react';\r\nimport { getFilterState } from '../selectors';\r\nimport { useTypedSelector } from '../hooks';\r\nimport { Filters } from '../common';\r\n\r\ninterface IOptions {\r\n    onChange?: (value: string, filterType: Filters) => any;\r\n    labelText: string;\r\n    placeHolderText?: string;\r\n    className?: string;\r\n    filterType: Filters;\r\n}\r\n\r\nexport const InputFilter: FC<IOptions> = ({ onChange, labelText, placeHolderText, className, filterType }) => {\r\n    const { filters } = useTypedSelector(getFilterState);\r\n    const onFilterChange = useCallback(({ target: { value } }: ChangeEvent<HTMLInputElement>) => onChange?.(value, filterType), [onChange, filterType]);\r\n\r\n    return (\r\n        <InputGroup className={ className + ' p-2' }>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n                <InputGroupText>{ labelText }</InputGroupText>\r\n            </InputGroupAddon>\r\n\r\n            <Input placeholder={ placeHolderText } value={ filters?.[filterType]?.value ?? '' } onChange={ onFilterChange } />\r\n        </InputGroup>\r\n    )\r\n}\r\n","import { FILTER_TYPES, Filters, getUrlWithFilters, TInputFilter, TSelectFilter } from '../common';\r\nimport { FC, MouseEventHandler, useCallback, useState } from 'react';\r\nimport { Button, Modal, ModalBody, ModalHeader } from 'reactstrap';\r\nimport { useActions, useTypedSelector } from '../hooks';\r\nimport { getFilterState } from '../selectors';\r\nimport { SelectFilter } from './SelectFilter';\r\nimport { InputFilter } from './InputFilter';\r\n\r\nimport './FilterPanel.sass';\r\n\r\nconst ICON_SIZE = 24;\r\n\r\nexport const FilterPanel: FC = () => {\r\n    const { resetFilters, setFiltered, setChanges, getData, setIsLoading } = useActions();\r\n    const { filters, isFiltered, hasChanges } = useTypedSelector(getFilterState);\r\n    const [isPanelOpen, setIsPanelOpen] = useState(false);\r\n    const onResetClick = useCallback(() => {\r\n        setIsLoading(true);\r\n        resetFilters();\r\n        getData();\r\n    }, [setIsLoading, resetFilters, getData]);\r\n    const onAcceptClick = useCallback(() => {\r\n        setIsLoading(true);\r\n        setFiltered(true);\r\n        setIsPanelOpen(false);\r\n        getData({ url: getUrlWithFilters(filters) });\r\n    }, [setIsLoading, setFiltered, setIsPanelOpen, getData, filters]);\r\n    const onPanelIconClick = useCallback(() => setIsPanelOpen((state) => !state), [setIsPanelOpen]);\r\n    const renderFilters = useCallback(() => Object.entries(FILTER_TYPES).map(([filterName, filterValue]) => (\r\n        filterValue.type === 'input'\r\n            ?                   <InputFilter labelText={ filterName }\r\n                                             key={ filterName }\r\n                                             placeHolderText={ (filterValue as TInputFilter).placeHolderText }\r\n                                             filterType={ filterName as Filters }\r\n                                             onChange={ (value, filterType) => setChanges({ filterType, payload: value }) } />\r\n            :                    <SelectFilter selectorText={ filterName }\r\n                                               key={ filterName }\r\n                                               filterValues={ filterValue as TSelectFilter }\r\n                                               filterType={ filterName as Filters }\r\n                                               onChange={ (value, filterType) => setChanges({ filterType, payload: value }) } />\r\n    )), [setChanges]);\r\n\r\n    return (\r\n        <div className='RIMO__filterPanel'>\r\n            <PanelIcon isIconFilled={ isFiltered } onClick={ onPanelIconClick } />\r\n\r\n            <Modal isOpen={ isPanelOpen } toggle={ onPanelIconClick }>\r\n               <ModalHeader toggle={ onPanelIconClick } className='position-relative'>\r\n                   Filter Panel\r\n                   { hasChanges &&\r\n                        <Button className='RIMO__filterPanel-icon'\r\n                                color='success'\r\n                                onClick={ onAcceptClick }>\r\n                           Accept\r\n                        </Button>\r\n                   }\r\n                   { isFiltered &&\r\n                        <Button className='RIMO__filterPanel-resetButton'\r\n                                color='link'\r\n                                size='sm'\r\n                                onClick={ onResetClick }>\r\n                           По умолчанию\r\n                        </Button>\r\n                   }\r\n               </ModalHeader>\r\n               <ModalBody>\r\n                   { renderFilters() }\r\n               </ModalBody>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface IPanelIconOptions {\r\n    isIconFilled: boolean;\r\n    onClick: MouseEventHandler<SVGSVGElement>;\r\n}\r\n\r\nconst PanelIcon: FC<IPanelIconOptions> = ({ isIconFilled, ...rest }) => (\r\n    <svg stroke=\"currentColor\"\r\n         fill=\"#fff\"\r\n         strokeWidth=\"0\"\r\n         viewBox=\"0 0 16 16\"\r\n         height={ICON_SIZE + 'px'}\r\n         width={ICON_SIZE + 'px'}\r\n         xmlns=\"http://www.w3.org/2000/svg\"\r\n         { ...rest }>\r\n        { isIconFilled && <path d=\"M2 3.5v-2h12v2l-4.5 5v5l-3 1v-6L2 3.5z\"></path> }\r\n        <path fillRule=\"evenodd\" d=\"M1.5 1.5A.5.5 0 012 1h12a.5.5 0 01.5.5v2a.5.5 0 01-.128.334L10 8.692V13.5a.5.5 0 01-.342.474l-3 1A.5.5 0 016 14.5V8.692L1.628 3.834A.5.5 0 011.5 3.5v-2zm1 .5v1.308l4.372 4.858A.5.5 0 017 8.5v5.306l2-.666V8.5a.5.5 0 01.128-.334L13.5 3.308V2h-11z\" clipRule=\"evenodd\"></path>\r\n    </svg>\r\n);\r\n","import { getDataState } from '../selectors';\r\nimport { useTypedSelector } from '../hooks';\r\nimport { SmallCard } from './SmallCard';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FC } from 'react';\r\n\r\nexport const CardWrapper: FC = () => {\r\n    const { renderData, processInfo } = useTypedSelector(getDataState);\r\n    const generateCards = () => renderData.map((item) => <SmallCard key={ item.id } item={ item } />);\r\n\r\n    if (processInfo.isLoading) {\r\n        return <Spinner color='primary' style={{ width: '5vw', height: '5vw' }}> </Spinner>\r\n    }\r\n\r\n    return (\r\n        <main className='bg-white h-100 w-100 rounded p-2 d-flex flex-wrap justify-content-between'>\r\n            { generateCards() }\r\n        </main>\r\n    )\r\n};\r\n","import { getError } from '../selectors';\r\nimport { useTypedSelector } from '../hooks';\r\nimport { FC } from 'react';\r\n\r\nexport const ErrorContainer: FC = ({ children }) => {\r\n    const error = useTypedSelector(getError);\r\n\r\n    return error\r\n            ? <div className='text-white'>{ error }</div>\r\n            : <>{ children }</>;\r\n}\r\n","import { FC } from 'react';\r\n\r\nimport './Header.sass';\r\n\r\nexport const Header: FC = () => (\r\n        <header className='RIMO__header bg-info justify-content-center align-items-center d-flex text-white font-monospace'>\r\n            Rick and Morty Widget\r\n        </header>\r\n);\r\n","import { PaginationWrapper } from './PaginationWrapper';\r\nimport { PopupContainer } from './PopupContainer';\r\nimport { FilterPanel } from './FilterPanel';\r\nimport { CardWrapper } from './CardWrapper';\r\nimport { ErrorContainer } from './Error';\r\nimport { Container } from 'reactstrap';\r\nimport { FC, useEffect } from 'react';\r\nimport { useActions } from '../hooks';\r\nimport { Header } from './Header';\r\n\r\nimport './App.sass';\r\n\r\n\r\nexport const App: FC = () => {\r\n    const { getData, setIsLoading } = useActions();\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        getData();\r\n    }, [getData, setIsLoading]);\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Container fluid className=\"bg-dark RIMO p-5 d-flex flex-column justify-content-center align-items-center\r\n                                        position-relative\">\r\n                <FilterPanel />\r\n                <ErrorContainer>\r\n                        <CardWrapper />\r\n                        <PaginationWrapper />\r\n                </ErrorContainer>\r\n            </Container>\r\n\r\n            <PopupContainer />\r\n        </>\r\n    )\r\n};\r\n","import { reducers, initialState, IState, TActions } from './reducers';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { default as thunk, ThunkMiddleware } from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers(reducers);\r\n\r\nexport const store = createStore(rootReducer, {}, applyMiddleware(thunk as ThunkMiddleware<IState, TActions>));\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport { initialState };\r\nexport type { IState };\r\n","import { default as ReactDOM } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { App } from './components';\r\nimport { store } from './store';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}